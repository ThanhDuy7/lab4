
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002df4  08002df4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df4  08002df4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000068  08002e64  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08002e64  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084c0  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000193a  00000000  00000000  00028594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  00029ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e8  00000000  00000000  0002a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b5a  00000000  00000000  0002b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac31  00000000  00000000  00042c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087682  00000000  00000000  0004d89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031a0  00000000  00000000  000d4f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000d80c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d70 	.word	0x08002d70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002d70 	.word	0x08002d70

0800014c <led_red>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_red() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8000150:	2108      	movs	r1, #8
 8000152:	4802      	ldr	r0, [pc, #8]	; (800015c <led_red+0x10>)
 8000154:	f000 feec 	bl	8000f30 <HAL_GPIO_TogglePin>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	40010800 	.word	0x40010800

08000160 <led_green>:

void led_green() {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 8000164:	2110      	movs	r1, #16
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <led_green+0x10>)
 8000168:	f000 fee2 	bl	8000f30 <HAL_GPIO_TogglePin>
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	40010800 	.word	0x40010800

08000174 <led_yellow>:

void led_yellow() {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW_GPIO_Port, YELLOW_Pin);
 8000178:	2120      	movs	r1, #32
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <led_yellow+0x10>)
 800017c:	f000 fed8 	bl	8000f30 <HAL_GPIO_TogglePin>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010800 	.word	0x40010800

08000188 <print_timestamp>:
void print_timestamp(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
    uint32_t timestamp = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
    printf("Timestamp: %u ms\n", timestamp);
 8000192:	6879      	ldr	r1, [r7, #4]
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <print_timestamp+0x1c>)
 8000196:	f001 ff6d 	bl	8002074 <iprintf>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	08002d88 	.word	0x08002d88

080001a8 <main>:
  * @retval int
  */


int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fbbc 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f830 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f8b6 	bl	8000324 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001b8:	f000 f868 	bl	800028c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80001bc:	4810      	ldr	r0, [pc, #64]	; (8000200 <main+0x58>)
 80001be:	f001 faff 	bl	80017c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(print_timestamp, 0, 10);
 80001c2:	220a      	movs	r2, #10
 80001c4:	2100      	movs	r1, #0
 80001c6:	480f      	ldr	r0, [pc, #60]	; (8000204 <main+0x5c>)
 80001c8:	f000 f8ee 	bl	80003a8 <SCH_Add_Task>
  SCH_Add_Task(led_red, 150, 200);
 80001cc:	22c8      	movs	r2, #200	; 0xc8
 80001ce:	2196      	movs	r1, #150	; 0x96
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0x60>)
 80001d2:	f000 f8e9 	bl	80003a8 <SCH_Add_Task>
  SCH_Add_Task(led_green, 500, 100);
 80001d6:	2264      	movs	r2, #100	; 0x64
 80001d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001dc:	480b      	ldr	r0, [pc, #44]	; (800020c <main+0x64>)
 80001de:	f000 f8e3 	bl	80003a8 <SCH_Add_Task>
  SCH_Add_Task(led_yellow, 100, 250);
 80001e2:	22fa      	movs	r2, #250	; 0xfa
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	480a      	ldr	r0, [pc, #40]	; (8000210 <main+0x68>)
 80001e8:	f000 f8de 	bl	80003a8 <SCH_Add_Task>
  SCH_Add_Task(print_timestamp, 0, 500);
 80001ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f0:	2100      	movs	r1, #0
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x5c>)
 80001f4:	f000 f8d8 	bl	80003a8 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80001f8:	f000 f9fc 	bl	80005f4 <SCH_Dispatch_Tasks>
 80001fc:	e7fc      	b.n	80001f8 <main+0x50>
 80001fe:	bf00      	nop
 8000200:	20000084 	.word	0x20000084
 8000204:	08000189 	.word	0x08000189
 8000208:	0800014d 	.word	0x0800014d
 800020c:	08000161 	.word	0x08000161
 8000210:	08000175 	.word	0x08000175

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 ff7b 	bl	800211e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fe8a 	bl	8000f64 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000256:	f000 f8a1 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f8f8 	bl	8001468 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f88d 	bl	800039c <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	; 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a8:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <MX_TIM2_Init+0x94>)
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_TIM2_Init+0x94>)
 80002b2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <MX_TIM2_Init+0x94>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_TIM2_Init+0x94>)
 80002c0:	2209      	movs	r2, #9
 80002c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_TIM2_Init+0x94>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ca:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_TIM2_Init+0x94>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d0:	4813      	ldr	r0, [pc, #76]	; (8000320 <MX_TIM2_Init+0x94>)
 80002d2:	f001 fa25 	bl	8001720 <HAL_TIM_Base_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002dc:	f000 f85e 	bl	800039c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	4619      	mov	r1, r3
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <MX_TIM2_Init+0x94>)
 80002ee:	f001 fbbb 	bl	8001a68 <HAL_TIM_ConfigClockSource>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002f8:	f000 f850 	bl	800039c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fc:	2300      	movs	r3, #0
 80002fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_TIM2_Init+0x94>)
 800030a:	f001 fd87 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000314:	f000 f842 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	3718      	adds	r7, #24
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000084 	.word	0x20000084

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_GPIO_Init+0x5c>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a10      	ldr	r2, [pc, #64]	; (8000380 <MX_GPIO_Init+0x5c>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_GPIO_Init+0x5c>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|YELLOW_Pin|AQUAL_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2178      	movs	r1, #120	; 0x78
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <MX_GPIO_Init+0x60>)
 8000356:	f000 fdd3 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin GREEN_Pin YELLOW_Pin AQUAL_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|YELLOW_Pin|AQUAL_Pin;
 800035a:	2378      	movs	r3, #120	; 0x78
 800035c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_GPIO_Init+0x60>)
 8000372:	f000 fc49 	bl	8000c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000376:	bf00      	nop
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40010800 	.word	0x40010800

08000388 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000390:	f000 f860 	bl	8000454 <SCH_Update>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>
	...

080003a8 <SCH_Add_Task>:
void SCH_Init(void) {
	current_index_task = 0;
}
void SCH_Add_Task( void(*pFunction)(),
		uint32_t DELAY,
		uint32_t PERIOD) {
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS) {
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <SCH_Add_Task+0xa4>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b27      	cmp	r3, #39	; 0x27
 80003ba:	d842      	bhi.n	8000442 <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <SCH_Add_Task+0xa4>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	4619      	mov	r1, r3
 80003c2:	4a23      	ldr	r2, [pc, #140]	; (8000450 <SCH_Add_Task+0xa8>)
 80003c4:	460b      	mov	r3, r1
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	440b      	add	r3, r1
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <SCH_Add_Task+0xa4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4619      	mov	r1, r3
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <SCH_Add_Task+0xa8>)
 80003da:	460b      	mov	r3, r1
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	440b      	add	r3, r1
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	3304      	adds	r3, #4
 80003e6:	68ba      	ldr	r2, [r7, #8]
 80003e8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 80003ea:	4b18      	ldr	r3, [pc, #96]	; (800044c <SCH_Add_Task+0xa4>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4619      	mov	r1, r3
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <SCH_Add_Task+0xa8>)
 80003f2:	460b      	mov	r3, r1
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	440b      	add	r3, r1
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	3308      	adds	r3, #8
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <SCH_Add_Task+0xa4>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4619      	mov	r1, r3
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <SCH_Add_Task+0xa8>)
 800040a:	460b      	mov	r3, r1
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	440b      	add	r3, r1
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	330c      	adds	r3, #12
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <SCH_Add_Task+0xa4>)
 800041c:	781a      	ldrb	r2, [r3, #0]
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <SCH_Add_Task+0xa4>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4619      	mov	r1, r3
 8000424:	4610      	mov	r0, r2
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <SCH_Add_Task+0xa8>)
 8000428:	460b      	mov	r3, r1
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	4413      	add	r3, r2
 8000432:	3310      	adds	r3, #16
 8000434:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <SCH_Add_Task+0xa4>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b03      	ldr	r3, [pc, #12]	; (800044c <SCH_Add_Task+0xa4>)
 8000440:	701a      	strb	r2, [r3, #0]
	}
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	200003ec 	.word	0x200003ec
 8000450:	200000cc 	.word	0x200000cc

08000454 <SCH_Update>:
void SCH_Update(void){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task;i++) {
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	e053      	b.n	8000508 <SCH_Update+0xb4>

		if( SCH_tasks_G[i].Delay > 0) {
 8000460:	492f      	ldr	r1, [pc, #188]	; (8000520 <SCH_Update+0xcc>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	4613      	mov	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4413      	add	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	3304      	adds	r3, #4
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d013      	beq.n	800049e <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8000476:	492a      	ldr	r1, [pc, #168]	; (8000520 <SCH_Update+0xcc>)
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	440b      	add	r3, r1
 8000484:	3304      	adds	r3, #4
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	1e59      	subs	r1, r3, #1
 800048a:	4825      	ldr	r0, [pc, #148]	; (8000520 <SCH_Update+0xcc>)
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4403      	add	r3, r0
 8000498:	3304      	adds	r3, #4
 800049a:	6019      	str	r1, [r3, #0]
 800049c:	e031      	b.n	8000502 <SCH_Update+0xae>
		} else {
			SCH_tasks_G[i].RunMe += 1;
 800049e:	4920      	ldr	r1, [pc, #128]	; (8000520 <SCH_Update+0xcc>)
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	440b      	add	r3, r1
 80004ac:	330c      	adds	r3, #12
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	b2d8      	uxtb	r0, r3
 80004b4:	491a      	ldr	r1, [pc, #104]	; (8000520 <SCH_Update+0xcc>)
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4613      	mov	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	440b      	add	r3, r1
 80004c2:	330c      	adds	r3, #12
 80004c4:	4602      	mov	r2, r0
 80004c6:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[i].Period) {
 80004c8:	4915      	ldr	r1, [pc, #84]	; (8000520 <SCH_Update+0xcc>)
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	4613      	mov	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	440b      	add	r3, r1
 80004d6:	3308      	adds	r3, #8
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d011      	beq.n	8000502 <SCH_Update+0xae>
					SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80004de:	4910      	ldr	r1, [pc, #64]	; (8000520 <SCH_Update+0xcc>)
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	440b      	add	r3, r1
 80004ec:	3308      	adds	r3, #8
 80004ee:	6819      	ldr	r1, [r3, #0]
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <SCH_Update+0xcc>)
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4613      	mov	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4403      	add	r3, r0
 80004fe:	3304      	adds	r3, #4
 8000500:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < current_index_task;i++) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3301      	adds	r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <SCH_Update+0xd0>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4293      	cmp	r3, r2
 8000512:	dba5      	blt.n	8000460 <SCH_Update+0xc>
				}


		}
	}
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	200000cc 	.word	0x200000cc
 8000524:	200003ec 	.word	0x200003ec

08000528 <SCH_Delete_Task>:
void SCH_Delete_Task(uint32_t taskID) {
 8000528:	b4b0      	push	{r4, r5, r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if (taskID >= SCH_MAX_TASKS || SCH_tasks_G[taskID].pTask == 0) return;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b27      	cmp	r3, #39	; 0x27
 8000534:	d855      	bhi.n	80005e2 <SCH_Delete_Task+0xba>
 8000536:	492d      	ldr	r1, [pc, #180]	; (80005ec <SCH_Delete_Task+0xc4>)
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	440b      	add	r3, r1
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d04b      	beq.n	80005e2 <SCH_Delete_Task+0xba>
	 for (uint32_t i = taskID; i < SCH_MAX_TASKS - 1; ++i) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e017      	b.n	8000580 <SCH_Delete_Task+0x58>
	        SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	4825      	ldr	r0, [pc, #148]	; (80005ec <SCH_Delete_Task+0xc4>)
 8000556:	68f9      	ldr	r1, [r7, #12]
 8000558:	460b      	mov	r3, r1
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	440b      	add	r3, r1
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	4418      	add	r0, r3
 8000562:	4922      	ldr	r1, [pc, #136]	; (80005ec <SCH_Delete_Task+0xc4>)
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	440b      	add	r3, r1
 800056e:	4604      	mov	r4, r0
 8000570:	461d      	mov	r5, r3
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	682b      	ldr	r3, [r5, #0]
 8000578:	6023      	str	r3, [r4, #0]
	 for (uint32_t i = taskID; i < SCH_MAX_TASKS - 1; ++i) {
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b26      	cmp	r3, #38	; 0x26
 8000584:	d9e4      	bls.n	8000550 <SCH_Delete_Task+0x28>
	    }
	SCH_tasks_G[taskID].pTask = 0x0000;
 8000586:	4919      	ldr	r1, [pc, #100]	; (80005ec <SCH_Delete_Task+0xc4>)
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	440b      	add	r3, r1
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Delay = 0 ;
 8000598:	4914      	ldr	r1, [pc, #80]	; (80005ec <SCH_Delete_Task+0xc4>)
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4613      	mov	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	440b      	add	r3, r1
 80005a6:	3304      	adds	r3, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Period = 0 ;
 80005ac:	490f      	ldr	r1, [pc, #60]	; (80005ec <SCH_Delete_Task+0xc4>)
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	440b      	add	r3, r1
 80005ba:	3308      	adds	r3, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].RunMe = 0 ;
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <SCH_Delete_Task+0xc4>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	330c      	adds	r3, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SCH_Delete_Task+0xc8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3b01      	subs	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <SCH_Delete_Task+0xc8>)
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e000      	b.n	80005e4 <SCH_Delete_Task+0xbc>
	if (taskID >= SCH_MAX_TASKS || SCH_tasks_G[taskID].pTask == 0) return;
 80005e2:	bf00      	nop
}
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bcb0      	pop	{r4, r5, r7}
 80005ea:	4770      	bx	lr
 80005ec:	200000cc 	.word	0x200000cc
 80005f0:	200003ec 	.word	0x200003ec

080005f4 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	for (int i = 0; i< current_index_task; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e02f      	b.n	8000660 <SCH_Dispatch_Tasks+0x6c>
		if(SCH_tasks_G[i].pTask != 0) {
 8000600:	491d      	ldr	r1, [pc, #116]	; (8000678 <SCH_Dispatch_Tasks+0x84>)
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d022      	beq.n	800065a <SCH_Dispatch_Tasks+0x66>
			if (SCH_tasks_G[i].RunMe > 0) {
 8000614:	4918      	ldr	r1, [pc, #96]	; (8000678 <SCH_Dispatch_Tasks+0x84>)
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	330c      	adds	r3, #12
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d008      	beq.n	800063c <SCH_Dispatch_Tasks+0x48>

				(*SCH_tasks_G[i].pTask)();
 800062a:	4913      	ldr	r1, [pc, #76]	; (8000678 <SCH_Dispatch_Tasks+0x84>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	440b      	add	r3, r1
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4798      	blx	r3
			}
			if (SCH_tasks_G[i].Period == 0) {
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <SCH_Dispatch_Tasks+0x84>)
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	440b      	add	r3, r1
 800064a:	3308      	adds	r3, #8
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <SCH_Dispatch_Tasks+0x66>
				SCH_Delete_Task(i);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff67 	bl	8000528 <SCH_Delete_Task>
	for (int i = 0; i< current_index_task; i++) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3301      	adds	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <SCH_Dispatch_Tasks+0x88>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4293      	cmp	r3, r2
 800066a:	dbc9      	blt.n	8000600 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000cc 	.word	0x200000cc
 800067c:	200003ec 	.word	0x200003ec

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x60>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x60>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f4:	d113      	bne.n	800071e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_TIM_Base_MspInit+0x44>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_TIM_Base_MspInit+0x44>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_TIM_Base_MspInit+0x44>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	210f      	movs	r1, #15
 8000712:	201c      	movs	r0, #28
 8000714:	f000 fa41 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000718:	201c      	movs	r0, #28
 800071a:	f000 fa5a 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f91f 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <TIM2_IRQHandler+0x10>)
 8000782:	f001 f869 	bl	8001858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000084 	.word	0x20000084

08000790 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a2:	f3af 8000 	nop.w
 80007a6:	4601      	mov	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
  }

  return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e009      	b.n	80007f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf1      	blt.n	80007dc <_write+0x12>
  }
  return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_close>:

int _close(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000828:	605a      	str	r2, [r3, #4]
  return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <_isatty>:

int _isatty(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f001 fc92 	bl	80021bc <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20002800 	.word	0x20002800
 80008c4:	00000400 	.word	0x00000400
 80008c8:	200003f0 	.word	0x200003f0
 80008cc:	20000548 	.word	0x20000548

080008d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008dc:	f7ff fff8 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f8:	4c09      	ldr	r4, [pc, #36]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000906:	f001 fc5f 	bl	80021c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fc4d 	bl	80001a8 <main>
  bx lr
 800090e:	4770      	bx	lr
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000918:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 800091c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000920:	20000544 	.word	0x20000544

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x28>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f923 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	200f      	movs	r0, #15
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fe9c 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f93b 	bl	8000bee <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f903 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_IncTick+0x20>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000008 	.word	0x20000008
 80009d4:	200003f4 	.word	0x200003f4

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	200003f4 	.word	0x200003f4

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db0b      	blt.n	8000a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 021f 	and.w	r2, r3, #31
 8000a68:	4906      	ldr	r1, [pc, #24]	; (8000a84 <__NVIC_EnableIRQ+0x34>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	2001      	movs	r0, #1
 8000a72:	fa00 f202 	lsl.w	r2, r0, r2
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff90 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff2d 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff42 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff90 	bl	8000adc <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5f 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff35 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	e161      	b.n	8000ee0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8150 	bne.w	8000eda <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4a97      	ldr	r2, [pc, #604]	; (8000e9c <HAL_GPIO_Init+0x294>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d05e      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c44:	4a95      	ldr	r2, [pc, #596]	; (8000e9c <HAL_GPIO_Init+0x294>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d875      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c4a:	4a95      	ldr	r2, [pc, #596]	; (8000ea0 <HAL_GPIO_Init+0x298>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d058      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c50:	4a93      	ldr	r2, [pc, #588]	; (8000ea0 <HAL_GPIO_Init+0x298>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d86f      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c56:	4a93      	ldr	r2, [pc, #588]	; (8000ea4 <HAL_GPIO_Init+0x29c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d052      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c5c:	4a91      	ldr	r2, [pc, #580]	; (8000ea4 <HAL_GPIO_Init+0x29c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d869      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c62:	4a91      	ldr	r2, [pc, #580]	; (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d04c      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c68:	4a8f      	ldr	r2, [pc, #572]	; (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d863      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c6e:	4a8f      	ldr	r2, [pc, #572]	; (8000eac <HAL_GPIO_Init+0x2a4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d046      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c74:	4a8d      	ldr	r2, [pc, #564]	; (8000eac <HAL_GPIO_Init+0x2a4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d85d      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d82a      	bhi.n	8000cd4 <HAL_GPIO_Init+0xcc>
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d859      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c82:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <HAL_GPIO_Init+0x80>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000d03 	.word	0x08000d03
 8000c8c:	08000cdd 	.word	0x08000cdd
 8000c90:	08000cef 	.word	0x08000cef
 8000c94:	08000d31 	.word	0x08000d31
 8000c98:	08000d37 	.word	0x08000d37
 8000c9c:	08000d37 	.word	0x08000d37
 8000ca0:	08000d37 	.word	0x08000d37
 8000ca4:	08000d37 	.word	0x08000d37
 8000ca8:	08000d37 	.word	0x08000d37
 8000cac:	08000d37 	.word	0x08000d37
 8000cb0:	08000d37 	.word	0x08000d37
 8000cb4:	08000d37 	.word	0x08000d37
 8000cb8:	08000d37 	.word	0x08000d37
 8000cbc:	08000d37 	.word	0x08000d37
 8000cc0:	08000d37 	.word	0x08000d37
 8000cc4:	08000d37 	.word	0x08000d37
 8000cc8:	08000d37 	.word	0x08000d37
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000cf9 	.word	0x08000cf9
 8000cd4:	4a76      	ldr	r2, [pc, #472]	; (8000eb0 <HAL_GPIO_Init+0x2a8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cda:	e02c      	b.n	8000d36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e029      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e024      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e01f      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e01a      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e013      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	611a      	str	r2, [r3, #16]
          break;
 8000d22:	e009      	b.n	8000d38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d24:	2308      	movs	r3, #8
 8000d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	615a      	str	r2, [r3, #20]
          break;
 8000d2e:	e003      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          break;
 8000d36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2bff      	cmp	r3, #255	; 0xff
 8000d3c:	d801      	bhi.n	8000d42 <HAL_GPIO_Init+0x13a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	e001      	b.n	8000d46 <HAL_GPIO_Init+0x13e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3304      	adds	r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2bff      	cmp	r3, #255	; 0xff
 8000d4c:	d802      	bhi.n	8000d54 <HAL_GPIO_Init+0x14c>
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x152>
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3b08      	subs	r3, #8
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	210f      	movs	r1, #15
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	6a39      	ldr	r1, [r7, #32]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80a9 	beq.w	8000eda <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d88:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da0:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <HAL_GPIO_Init+0x2b4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d00d      	beq.n	8000de8 <HAL_GPIO_Init+0x1e0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d007      	beq.n	8000de4 <HAL_GPIO_Init+0x1dc>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	; (8000ec4 <HAL_GPIO_Init+0x2bc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d101      	bne.n	8000de0 <HAL_GPIO_Init+0x1d8>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e004      	b.n	8000dea <HAL_GPIO_Init+0x1e2>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e002      	b.n	8000dea <HAL_GPIO_Init+0x1e2>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <HAL_GPIO_Init+0x1e2>
 8000de8:	2300      	movs	r3, #0
 8000dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dec:	f002 0203 	and.w	r2, r2, #3
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	4093      	lsls	r3, r2
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfa:	492f      	ldr	r1, [pc, #188]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	492b      	ldr	r1, [pc, #172]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4927      	ldr	r1, [pc, #156]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	4921      	ldr	r1, [pc, #132]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60cb      	str	r3, [r1, #12]
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	491d      	ldr	r1, [pc, #116]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4917      	ldr	r1, [pc, #92]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d01f      	beq.n	8000ecc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	e01f      	b.n	8000eda <HAL_GPIO_Init+0x2d2>
 8000e9a:	bf00      	nop
 8000e9c:	10320000 	.word	0x10320000
 8000ea0:	10310000 	.word	0x10310000
 8000ea4:	10220000 	.word	0x10220000
 8000ea8:	10210000 	.word	0x10210000
 8000eac:	10120000 	.word	0x10120000
 8000eb0:	10110000 	.word	0x10110000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_GPIO_Init+0x2f4>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <HAL_GPIO_Init+0x2f4>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f ae96 	bne.w	8000c1c <HAL_GPIO_Init+0x14>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	372c      	adds	r7, #44	; 0x2c
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	611a      	str	r2, [r3, #16]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43d9      	mvns	r1, r3
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	400b      	ands	r3, r1
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	611a      	str	r2, [r3, #16]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e272      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8087 	beq.w	8001092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f84:	4b92      	ldr	r3, [pc, #584]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d00c      	beq.n	8000faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f90:	4b8f      	ldr	r3, [pc, #572]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d112      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06c      	beq.n	8001090 <HAL_RCC_OscConfig+0x12c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d168      	bne.n	8001090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e24c      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x76>
 8000fcc:	4b80      	ldr	r3, [pc, #512]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a7f      	ldr	r2, [pc, #508]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e02e      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x98>
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b78      	ldr	r3, [pc, #480]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a77      	ldr	r2, [pc, #476]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0xbc>
 8001006:	4b72      	ldr	r3, [pc, #456]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a71      	ldr	r2, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8001020:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a6a      	ldr	r2, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a67      	ldr	r2, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fcca 	bl	80009d8 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fcc6 	bl	80009d8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e200      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b5d      	ldr	r3, [pc, #372]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe4>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fcb6 	bl	80009d8 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fcb2 	bl	80009d8 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1ec      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x10c>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d063      	beq.n	8001166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e1c0      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e03a      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc6b 	bl	80009d8 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fc67 	bl	80009d8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1a1      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4927      	ldr	r1, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fc4a 	bl	80009d8 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fc46 	bl	80009d8 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e180      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d03a      	beq.n	80011e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d019      	beq.n	80011ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fc2a 	bl	80009d8 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc26 	bl	80009d8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e160      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fa9c 	bl	80016e4 <RCC_Delay>
 80011ac:	e01c      	b.n	80011e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fc10 	bl	80009d8 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ba:	e00f      	b.n	80011dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc0c 	bl	80009d8 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d908      	bls.n	80011dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e146      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	42420000 	.word	0x42420000
 80011d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b92      	ldr	r3, [pc, #584]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e9      	bne.n	80011bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a6 	beq.w	8001342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a87      	ldr	r2, [pc, #540]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4b82      	ldr	r3, [pc, #520]	; (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4b7f      	ldr	r3, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7e      	ldr	r2, [pc, #504]	; (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fbcd 	bl	80009d8 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fbc9 	bl	80009d8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e103      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x4c8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x312>
 8001268:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	e02d      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x334>
 800127e:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a69      	ldr	r2, [pc, #420]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b67      	ldr	r3, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a66      	ldr	r2, [pc, #408]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	e01c      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b05      	cmp	r3, #5
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x356>
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a60      	ldr	r2, [pc, #384]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a5d      	ldr	r2, [pc, #372]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	e00b      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 80012ba:	4b5b      	ldr	r3, [pc, #364]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	4b58      	ldr	r3, [pc, #352]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a57      	ldr	r2, [pc, #348]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fb7d 	bl	80009d8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb79 	bl	80009d8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0b1      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ee      	beq.n	80012e2 <HAL_RCC_OscConfig+0x37e>
 8001304:	e014      	b.n	8001330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb67 	bl	80009d8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fb63 	bl	80009d8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e09b      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ee      	bne.n	800130e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a3b      	ldr	r2, [pc, #236]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8087 	beq.w	800145a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d061      	beq.n	800141c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d146      	bne.n	80013ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <HAL_RCC_OscConfig+0x4cc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb37 	bl	80009d8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb33 	bl	80009d8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e06d      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4921      	ldr	r1, [pc, #132]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a19      	ldr	r1, [r3, #32]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	430b      	orrs	r3, r1
 80013ba:	491b      	ldr	r1, [pc, #108]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_RCC_OscConfig+0x4cc>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb07 	bl	80009d8 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff fb03 	bl	80009d8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e03d      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x46a>
 80013ec:	e035      	b.n	800145a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_RCC_OscConfig+0x4cc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff faf0 	bl	80009d8 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff faec 	bl	80009d8 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e026      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x498>
 800141a:	e01e      	b.n	800145a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d107      	bne.n	8001434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e019      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
 8001428:	40021000 	.word	0x40021000
 800142c:	40007000 	.word	0x40007000
 8001430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_OscConfig+0x500>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	429a      	cmp	r2, r3
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	429a      	cmp	r2, r3
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0d0      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800147c:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d910      	bls.n	80014ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 0207 	bic.w	r2, r3, #7
 8001492:	4965      	ldr	r1, [pc, #404]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0b8      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	494d      	ldr	r1, [pc, #308]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d040      	beq.n	8001588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d115      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e07f      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e073      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06b      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f023 0203 	bic.w	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4936      	ldr	r1, [pc, #216]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001558:	f7ff fa3e 	bl	80009d8 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	e00a      	b.n	8001576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff fa3a 	bl	80009d8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e053      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 020c 	and.w	r2, r3, #12
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	429a      	cmp	r2, r3
 8001586:	d1eb      	bne.n	8001560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d210      	bcs.n	80015b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	4922      	ldr	r1, [pc, #136]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e032      	b.n	800161e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4916      	ldr	r1, [pc, #88]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015f6:	f000 f821 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	490a      	ldr	r1, [pc, #40]	; (8001630 <HAL_RCC_ClockConfig+0x1c8>)
 8001608:	5ccb      	ldrb	r3, [r1, r3]
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1cc>)
 8001610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f99c 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40022000 	.word	0x40022000
 800162c:	40021000 	.word	0x40021000
 8001630:	08002d9c 	.word	0x08002d9c
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x30>
 8001666:	2b08      	cmp	r3, #8
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x36>
 800166a:	e027      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800166e:	613b      	str	r3, [r7, #16]
      break;
 8001670:	e027      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0c5b      	lsrs	r3, r3, #17
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800169e:	fb03 f202 	mul.w	r2, r3, r2
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e004      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	613b      	str	r3, [r7, #16]
      break;
 80016ba:	e002      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80016be:	613b      	str	r3, [r7, #16]
      break;
 80016c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c2:	693b      	ldr	r3, [r7, #16]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	007a1200 	.word	0x007a1200
 80016d8:	08002dac 	.word	0x08002dac
 80016dc:	08002dbc 	.word	0x08002dbc
 80016e0:	003d0900 	.word	0x003d0900

080016e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <RCC_Delay+0x34>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <RCC_Delay+0x38>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0a5b      	lsrs	r3, r3, #9
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001700:	bf00      	nop
  }
  while (Delay --);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	60fa      	str	r2, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <RCC_Delay+0x1c>
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	20000000 	.word	0x20000000
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e041      	b.n	80017b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe ffcc 	bl	80006e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3304      	adds	r3, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f000 fa6e 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d001      	beq.n	80017d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e035      	b.n	8001844 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a16      	ldr	r2, [pc, #88]	; (8001850 <HAL_TIM_Base_Start_IT+0x90>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_TIM_Base_Start_IT+0x4e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001802:	d004      	beq.n	800180e <HAL_TIM_Base_Start_IT+0x4e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_TIM_Base_Start_IT+0x94>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d111      	bne.n	8001832 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b06      	cmp	r3, #6
 800181e:	d010      	beq.n	8001842 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001830:	e007      	b.n	8001842 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40000400 	.word	0x40000400

08001858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b02      	cmp	r3, #2
 800186c:	d122      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b02      	cmp	r3, #2
 800187a:	d11b      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0202 	mvn.w	r2, #2
 8001884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f9b4 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 80018a0:	e005      	b.n	80018ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9a7 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f9b6 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d122      	bne.n	8001908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d11b      	bne.n	8001908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0204 	mvn.w	r2, #4
 80018d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f98a 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 80018f4:	e005      	b.n	8001902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f97d 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f98c 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d122      	bne.n	800195c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b08      	cmp	r3, #8
 8001922:	d11b      	bne.n	800195c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0208 	mvn.w	r2, #8
 800192c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2204      	movs	r2, #4
 8001932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f960 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 8001948:	e005      	b.n	8001956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f953 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f962 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b10      	cmp	r3, #16
 8001968:	d122      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b10      	cmp	r3, #16
 8001976:	d11b      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0210 	mvn.w	r2, #16
 8001980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2208      	movs	r2, #8
 8001986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f936 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 800199c:	e005      	b.n	80019aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f929 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f938 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10e      	bne.n	80019dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0201 	mvn.w	r2, #1
 80019d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe fcd6 	bl	8000388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	2b80      	cmp	r3, #128	; 0x80
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f4:	2b80      	cmp	r3, #128	; 0x80
 80019f6:	d107      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa6b 	bl	8001ede <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a12:	2b40      	cmp	r3, #64	; 0x40
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d107      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8fc 	bl	8001c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d107      	bne.n	8001a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0220 	mvn.w	r2, #32
 8001a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fa36 	bl	8001ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_TIM_ConfigClockSource+0x1c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0b4      	b.n	8001bee <HAL_TIM_ConfigClockSource+0x186>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abc:	d03e      	beq.n	8001b3c <HAL_TIM_ConfigClockSource+0xd4>
 8001abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac2:	f200 8087 	bhi.w	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	f000 8086 	beq.w	8001bda <HAL_TIM_ConfigClockSource+0x172>
 8001ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad2:	d87f      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad4:	2b70      	cmp	r3, #112	; 0x70
 8001ad6:	d01a      	beq.n	8001b0e <HAL_TIM_ConfigClockSource+0xa6>
 8001ad8:	2b70      	cmp	r3, #112	; 0x70
 8001ada:	d87b      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	2b60      	cmp	r3, #96	; 0x60
 8001ade:	d050      	beq.n	8001b82 <HAL_TIM_ConfigClockSource+0x11a>
 8001ae0:	2b60      	cmp	r3, #96	; 0x60
 8001ae2:	d877      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ae4:	2b50      	cmp	r3, #80	; 0x50
 8001ae6:	d03c      	beq.n	8001b62 <HAL_TIM_ConfigClockSource+0xfa>
 8001ae8:	2b50      	cmp	r3, #80	; 0x50
 8001aea:	d873      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	d058      	beq.n	8001ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8001af0:	2b40      	cmp	r3, #64	; 0x40
 8001af2:	d86f      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001af4:	2b30      	cmp	r3, #48	; 0x30
 8001af6:	d064      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001af8:	2b30      	cmp	r3, #48	; 0x30
 8001afa:	d86b      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d060      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d867      	bhi.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05c      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d05a      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001b0c:	e062      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b1e:	f000 f95e 	bl	8001dde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	609a      	str	r2, [r3, #8]
      break;
 8001b3a:	e04f      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b4c:	f000 f947 	bl	8001dde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b5e:	609a      	str	r2, [r3, #8]
      break;
 8001b60:	e03c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f000 f8be 	bl	8001cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2150      	movs	r1, #80	; 0x50
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f915 	bl	8001daa <TIM_ITRx_SetConfig>
      break;
 8001b80:	e02c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f000 f8dc 	bl	8001d4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2160      	movs	r1, #96	; 0x60
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f905 	bl	8001daa <TIM_ITRx_SetConfig>
      break;
 8001ba0:	e01c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f000 f89e 	bl	8001cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f8f5 	bl	8001daa <TIM_ITRx_SetConfig>
      break;
 8001bc0:	e00c      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f000 f8ec 	bl	8001daa <TIM_ITRx_SetConfig>
      break;
 8001bd2:	e003      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e000      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
	...

08001c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <TIM_Base_SetConfig+0xa8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <TIM_Base_SetConfig+0x28>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d003      	beq.n	8001c68 <TIM_Base_SetConfig+0x28>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <TIM_Base_SetConfig+0xac>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d108      	bne.n	8001c7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <TIM_Base_SetConfig+0xa8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <TIM_Base_SetConfig+0x52>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c88:	d003      	beq.n	8001c92 <TIM_Base_SetConfig+0x52>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <TIM_Base_SetConfig+0xac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d108      	bne.n	8001ca4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <TIM_Base_SetConfig+0xa8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d103      	bne.n	8001cd8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	615a      	str	r2, [r3, #20]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40000400 	.word	0x40000400

08001cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f023 0201 	bic.w	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f023 030a 	bic.w	r3, r3, #10
 8001d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	621a      	str	r2, [r3, #32]
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0210 	bic.w	r2, r3, #16
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	031b      	lsls	r3, r3, #12
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	621a      	str	r2, [r3, #32]
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f043 0307 	orr.w	r3, r3, #7
 8001dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b087      	sub	sp, #28
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	021a      	lsls	r2, r3, #8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	609a      	str	r2, [r3, #8]
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e041      	b.n	8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d004      	beq.n	8001e8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400

08001ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <std>:
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	b510      	push	{r4, lr}
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8001efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001efe:	6083      	str	r3, [r0, #8]
 8001f00:	8181      	strh	r1, [r0, #12]
 8001f02:	6643      	str	r3, [r0, #100]	; 0x64
 8001f04:	81c2      	strh	r2, [r0, #14]
 8001f06:	6183      	str	r3, [r0, #24]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	305c      	adds	r0, #92	; 0x5c
 8001f0e:	f000 f906 	bl	800211e <memset>
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <std+0x58>)
 8001f14:	6224      	str	r4, [r4, #32]
 8001f16:	6263      	str	r3, [r4, #36]	; 0x24
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <std+0x5c>)
 8001f1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <std+0x60>)
 8001f1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <std+0x64>)
 8001f22:	6323      	str	r3, [r4, #48]	; 0x30
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <std+0x68>)
 8001f26:	429c      	cmp	r4, r3
 8001f28:	d006      	beq.n	8001f38 <std+0x48>
 8001f2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001f2e:	4294      	cmp	r4, r2
 8001f30:	d002      	beq.n	8001f38 <std+0x48>
 8001f32:	33d0      	adds	r3, #208	; 0xd0
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d105      	bne.n	8001f44 <std+0x54>
 8001f38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f40:	f000 b966 	b.w	8002210 <__retarget_lock_init_recursive>
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	bf00      	nop
 8001f48:	08002099 	.word	0x08002099
 8001f4c:	080020bb 	.word	0x080020bb
 8001f50:	080020f3 	.word	0x080020f3
 8001f54:	08002117 	.word	0x08002117
 8001f58:	200003f8 	.word	0x200003f8

08001f5c <stdio_exit_handler>:
 8001f5c:	4a02      	ldr	r2, [pc, #8]	; (8001f68 <stdio_exit_handler+0xc>)
 8001f5e:	4903      	ldr	r1, [pc, #12]	; (8001f6c <stdio_exit_handler+0x10>)
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <stdio_exit_handler+0x14>)
 8001f62:	f000 b869 	b.w	8002038 <_fwalk_sglue>
 8001f66:	bf00      	nop
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	08002ab1 	.word	0x08002ab1
 8001f70:	20000018 	.word	0x20000018

08001f74 <cleanup_stdio>:
 8001f74:	6841      	ldr	r1, [r0, #4]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <cleanup_stdio+0x34>)
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4299      	cmp	r1, r3
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	d001      	beq.n	8001f84 <cleanup_stdio+0x10>
 8001f80:	f000 fd96 	bl	8002ab0 <_fflush_r>
 8001f84:	68a1      	ldr	r1, [r4, #8]
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <cleanup_stdio+0x38>)
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	d002      	beq.n	8001f92 <cleanup_stdio+0x1e>
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f000 fd8f 	bl	8002ab0 <_fflush_r>
 8001f92:	68e1      	ldr	r1, [r4, #12]
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <cleanup_stdio+0x3c>)
 8001f96:	4299      	cmp	r1, r3
 8001f98:	d004      	beq.n	8001fa4 <cleanup_stdio+0x30>
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fa0:	f000 bd86 	b.w	8002ab0 <_fflush_r>
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200003f8 	.word	0x200003f8
 8001fac:	20000460 	.word	0x20000460
 8001fb0:	200004c8 	.word	0x200004c8

08001fb4 <global_stdio_init.part.0>:
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <global_stdio_init.part.0+0x30>)
 8001fb8:	4c0b      	ldr	r4, [pc, #44]	; (8001fe8 <global_stdio_init.part.0+0x34>)
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <global_stdio_init.part.0+0x38>)
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f7ff ff94 	bl	8001ef0 <std>
 8001fc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2109      	movs	r1, #9
 8001fd0:	f7ff ff8e 	bl	8001ef0 <std>
 8001fd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001fd8:	2202      	movs	r2, #2
 8001fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fde:	2112      	movs	r1, #18
 8001fe0:	f7ff bf86 	b.w	8001ef0 <std>
 8001fe4:	20000530 	.word	0x20000530
 8001fe8:	200003f8 	.word	0x200003f8
 8001fec:	08001f5d 	.word	0x08001f5d

08001ff0 <__sfp_lock_acquire>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__sfp_lock_acquire+0x8>)
 8001ff2:	f000 b90e 	b.w	8002212 <__retarget_lock_acquire_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	20000539 	.word	0x20000539

08001ffc <__sfp_lock_release>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__sfp_lock_release+0x8>)
 8001ffe:	f000 b909 	b.w	8002214 <__retarget_lock_release_recursive>
 8002002:	bf00      	nop
 8002004:	20000539 	.word	0x20000539

08002008 <__sinit>:
 8002008:	b510      	push	{r4, lr}
 800200a:	4604      	mov	r4, r0
 800200c:	f7ff fff0 	bl	8001ff0 <__sfp_lock_acquire>
 8002010:	6a23      	ldr	r3, [r4, #32]
 8002012:	b11b      	cbz	r3, 800201c <__sinit+0x14>
 8002014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002018:	f7ff bff0 	b.w	8001ffc <__sfp_lock_release>
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__sinit+0x28>)
 800201e:	6223      	str	r3, [r4, #32]
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__sinit+0x2c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f5      	bne.n	8002014 <__sinit+0xc>
 8002028:	f7ff ffc4 	bl	8001fb4 <global_stdio_init.part.0>
 800202c:	e7f2      	b.n	8002014 <__sinit+0xc>
 800202e:	bf00      	nop
 8002030:	08001f75 	.word	0x08001f75
 8002034:	20000530 	.word	0x20000530

08002038 <_fwalk_sglue>:
 8002038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800203c:	4607      	mov	r7, r0
 800203e:	4688      	mov	r8, r1
 8002040:	4614      	mov	r4, r2
 8002042:	2600      	movs	r6, #0
 8002044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002048:	f1b9 0901 	subs.w	r9, r9, #1
 800204c:	d505      	bpl.n	800205a <_fwalk_sglue+0x22>
 800204e:	6824      	ldr	r4, [r4, #0]
 8002050:	2c00      	cmp	r4, #0
 8002052:	d1f7      	bne.n	8002044 <_fwalk_sglue+0xc>
 8002054:	4630      	mov	r0, r6
 8002056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800205a:	89ab      	ldrh	r3, [r5, #12]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d907      	bls.n	8002070 <_fwalk_sglue+0x38>
 8002060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002064:	3301      	adds	r3, #1
 8002066:	d003      	beq.n	8002070 <_fwalk_sglue+0x38>
 8002068:	4629      	mov	r1, r5
 800206a:	4638      	mov	r0, r7
 800206c:	47c0      	blx	r8
 800206e:	4306      	orrs	r6, r0
 8002070:	3568      	adds	r5, #104	; 0x68
 8002072:	e7e9      	b.n	8002048 <_fwalk_sglue+0x10>

08002074 <iprintf>:
 8002074:	b40f      	push	{r0, r1, r2, r3}
 8002076:	b507      	push	{r0, r1, r2, lr}
 8002078:	4906      	ldr	r1, [pc, #24]	; (8002094 <iprintf+0x20>)
 800207a:	ab04      	add	r3, sp, #16
 800207c:	6808      	ldr	r0, [r1, #0]
 800207e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002082:	6881      	ldr	r1, [r0, #8]
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	f000 f9e3 	bl	8002450 <_vfiprintf_r>
 800208a:	b003      	add	sp, #12
 800208c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002090:	b004      	add	sp, #16
 8002092:	4770      	bx	lr
 8002094:	20000064 	.word	0x20000064

08002098 <__sread>:
 8002098:	b510      	push	{r4, lr}
 800209a:	460c      	mov	r4, r1
 800209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a0:	f000 f868 	bl	8002174 <_read_r>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	bfab      	itete	ge
 80020a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020aa:	89a3      	ldrhlt	r3, [r4, #12]
 80020ac:	181b      	addge	r3, r3, r0
 80020ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020b2:	bfac      	ite	ge
 80020b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80020b6:	81a3      	strhlt	r3, [r4, #12]
 80020b8:	bd10      	pop	{r4, pc}

080020ba <__swrite>:
 80020ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020be:	461f      	mov	r7, r3
 80020c0:	898b      	ldrh	r3, [r1, #12]
 80020c2:	4605      	mov	r5, r0
 80020c4:	05db      	lsls	r3, r3, #23
 80020c6:	460c      	mov	r4, r1
 80020c8:	4616      	mov	r6, r2
 80020ca:	d505      	bpl.n	80020d8 <__swrite+0x1e>
 80020cc:	2302      	movs	r3, #2
 80020ce:	2200      	movs	r2, #0
 80020d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d4:	f000 f83c 	bl	8002150 <_lseek_r>
 80020d8:	89a3      	ldrh	r3, [r4, #12]
 80020da:	4632      	mov	r2, r6
 80020dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e0:	81a3      	strh	r3, [r4, #12]
 80020e2:	4628      	mov	r0, r5
 80020e4:	463b      	mov	r3, r7
 80020e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ee:	f000 b853 	b.w	8002198 <_write_r>

080020f2 <__sseek>:
 80020f2:	b510      	push	{r4, lr}
 80020f4:	460c      	mov	r4, r1
 80020f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020fa:	f000 f829 	bl	8002150 <_lseek_r>
 80020fe:	1c43      	adds	r3, r0, #1
 8002100:	89a3      	ldrh	r3, [r4, #12]
 8002102:	bf15      	itete	ne
 8002104:	6560      	strne	r0, [r4, #84]	; 0x54
 8002106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800210a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800210e:	81a3      	strheq	r3, [r4, #12]
 8002110:	bf18      	it	ne
 8002112:	81a3      	strhne	r3, [r4, #12]
 8002114:	bd10      	pop	{r4, pc}

08002116 <__sclose>:
 8002116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800211a:	f000 b809 	b.w	8002130 <_close_r>

0800211e <memset>:
 800211e:	4603      	mov	r3, r0
 8002120:	4402      	add	r2, r0
 8002122:	4293      	cmp	r3, r2
 8002124:	d100      	bne.n	8002128 <memset+0xa>
 8002126:	4770      	bx	lr
 8002128:	f803 1b01 	strb.w	r1, [r3], #1
 800212c:	e7f9      	b.n	8002122 <memset+0x4>
	...

08002130 <_close_r>:
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	2300      	movs	r3, #0
 8002134:	4d05      	ldr	r5, [pc, #20]	; (800214c <_close_r+0x1c>)
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	602b      	str	r3, [r5, #0]
 800213c:	f7fe fb61 	bl	8000802 <_close>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d102      	bne.n	800214a <_close_r+0x1a>
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	b103      	cbz	r3, 800214a <_close_r+0x1a>
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	bd38      	pop	{r3, r4, r5, pc}
 800214c:	20000534 	.word	0x20000534

08002150 <_lseek_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	2200      	movs	r2, #0
 800215a:	4d05      	ldr	r5, [pc, #20]	; (8002170 <_lseek_r+0x20>)
 800215c:	602a      	str	r2, [r5, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	f7fe fb73 	bl	800084a <_lseek>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d102      	bne.n	800216e <_lseek_r+0x1e>
 8002168:	682b      	ldr	r3, [r5, #0]
 800216a:	b103      	cbz	r3, 800216e <_lseek_r+0x1e>
 800216c:	6023      	str	r3, [r4, #0]
 800216e:	bd38      	pop	{r3, r4, r5, pc}
 8002170:	20000534 	.word	0x20000534

08002174 <_read_r>:
 8002174:	b538      	push	{r3, r4, r5, lr}
 8002176:	4604      	mov	r4, r0
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	2200      	movs	r2, #0
 800217e:	4d05      	ldr	r5, [pc, #20]	; (8002194 <_read_r+0x20>)
 8002180:	602a      	str	r2, [r5, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	f7fe fb04 	bl	8000790 <_read>
 8002188:	1c43      	adds	r3, r0, #1
 800218a:	d102      	bne.n	8002192 <_read_r+0x1e>
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	b103      	cbz	r3, 8002192 <_read_r+0x1e>
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	bd38      	pop	{r3, r4, r5, pc}
 8002194:	20000534 	.word	0x20000534

08002198 <_write_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4604      	mov	r4, r0
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	2200      	movs	r2, #0
 80021a2:	4d05      	ldr	r5, [pc, #20]	; (80021b8 <_write_r+0x20>)
 80021a4:	602a      	str	r2, [r5, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f7fe fb0f 	bl	80007ca <_write>
 80021ac:	1c43      	adds	r3, r0, #1
 80021ae:	d102      	bne.n	80021b6 <_write_r+0x1e>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	b103      	cbz	r3, 80021b6 <_write_r+0x1e>
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
 80021b8:	20000534 	.word	0x20000534

080021bc <__errno>:
 80021bc:	4b01      	ldr	r3, [pc, #4]	; (80021c4 <__errno+0x8>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000064 	.word	0x20000064

080021c8 <__libc_init_array>:
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	2600      	movs	r6, #0
 80021cc:	4d0c      	ldr	r5, [pc, #48]	; (8002200 <__libc_init_array+0x38>)
 80021ce:	4c0d      	ldr	r4, [pc, #52]	; (8002204 <__libc_init_array+0x3c>)
 80021d0:	1b64      	subs	r4, r4, r5
 80021d2:	10a4      	asrs	r4, r4, #2
 80021d4:	42a6      	cmp	r6, r4
 80021d6:	d109      	bne.n	80021ec <__libc_init_array+0x24>
 80021d8:	f000 fdca 	bl	8002d70 <_init>
 80021dc:	2600      	movs	r6, #0
 80021de:	4d0a      	ldr	r5, [pc, #40]	; (8002208 <__libc_init_array+0x40>)
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <__libc_init_array+0x44>)
 80021e2:	1b64      	subs	r4, r4, r5
 80021e4:	10a4      	asrs	r4, r4, #2
 80021e6:	42a6      	cmp	r6, r4
 80021e8:	d105      	bne.n	80021f6 <__libc_init_array+0x2e>
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
 80021ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f0:	4798      	blx	r3
 80021f2:	3601      	adds	r6, #1
 80021f4:	e7ee      	b.n	80021d4 <__libc_init_array+0xc>
 80021f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021fa:	4798      	blx	r3
 80021fc:	3601      	adds	r6, #1
 80021fe:	e7f2      	b.n	80021e6 <__libc_init_array+0x1e>
 8002200:	08002df4 	.word	0x08002df4
 8002204:	08002df4 	.word	0x08002df4
 8002208:	08002df4 	.word	0x08002df4
 800220c:	08002df8 	.word	0x08002df8

08002210 <__retarget_lock_init_recursive>:
 8002210:	4770      	bx	lr

08002212 <__retarget_lock_acquire_recursive>:
 8002212:	4770      	bx	lr

08002214 <__retarget_lock_release_recursive>:
 8002214:	4770      	bx	lr
	...

08002218 <_free_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4605      	mov	r5, r0
 800221c:	2900      	cmp	r1, #0
 800221e:	d040      	beq.n	80022a2 <_free_r+0x8a>
 8002220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002224:	1f0c      	subs	r4, r1, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	bfb8      	it	lt
 800222a:	18e4      	addlt	r4, r4, r3
 800222c:	f000 f8dc 	bl	80023e8 <__malloc_lock>
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <_free_r+0x8c>)
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	b933      	cbnz	r3, 8002244 <_free_r+0x2c>
 8002236:	6063      	str	r3, [r4, #4]
 8002238:	6014      	str	r4, [r2, #0]
 800223a:	4628      	mov	r0, r5
 800223c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002240:	f000 b8d8 	b.w	80023f4 <__malloc_unlock>
 8002244:	42a3      	cmp	r3, r4
 8002246:	d908      	bls.n	800225a <_free_r+0x42>
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	1821      	adds	r1, r4, r0
 800224c:	428b      	cmp	r3, r1
 800224e:	bf01      	itttt	eq
 8002250:	6819      	ldreq	r1, [r3, #0]
 8002252:	685b      	ldreq	r3, [r3, #4]
 8002254:	1809      	addeq	r1, r1, r0
 8002256:	6021      	streq	r1, [r4, #0]
 8002258:	e7ed      	b.n	8002236 <_free_r+0x1e>
 800225a:	461a      	mov	r2, r3
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	b10b      	cbz	r3, 8002264 <_free_r+0x4c>
 8002260:	42a3      	cmp	r3, r4
 8002262:	d9fa      	bls.n	800225a <_free_r+0x42>
 8002264:	6811      	ldr	r1, [r2, #0]
 8002266:	1850      	adds	r0, r2, r1
 8002268:	42a0      	cmp	r0, r4
 800226a:	d10b      	bne.n	8002284 <_free_r+0x6c>
 800226c:	6820      	ldr	r0, [r4, #0]
 800226e:	4401      	add	r1, r0
 8002270:	1850      	adds	r0, r2, r1
 8002272:	4283      	cmp	r3, r0
 8002274:	6011      	str	r1, [r2, #0]
 8002276:	d1e0      	bne.n	800223a <_free_r+0x22>
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4408      	add	r0, r1
 800227e:	6010      	str	r0, [r2, #0]
 8002280:	6053      	str	r3, [r2, #4]
 8002282:	e7da      	b.n	800223a <_free_r+0x22>
 8002284:	d902      	bls.n	800228c <_free_r+0x74>
 8002286:	230c      	movs	r3, #12
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	e7d6      	b.n	800223a <_free_r+0x22>
 800228c:	6820      	ldr	r0, [r4, #0]
 800228e:	1821      	adds	r1, r4, r0
 8002290:	428b      	cmp	r3, r1
 8002292:	bf01      	itttt	eq
 8002294:	6819      	ldreq	r1, [r3, #0]
 8002296:	685b      	ldreq	r3, [r3, #4]
 8002298:	1809      	addeq	r1, r1, r0
 800229a:	6021      	streq	r1, [r4, #0]
 800229c:	6063      	str	r3, [r4, #4]
 800229e:	6054      	str	r4, [r2, #4]
 80022a0:	e7cb      	b.n	800223a <_free_r+0x22>
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	2000053c 	.word	0x2000053c

080022a8 <sbrk_aligned>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4e0e      	ldr	r6, [pc, #56]	; (80022e4 <sbrk_aligned+0x3c>)
 80022ac:	460c      	mov	r4, r1
 80022ae:	6831      	ldr	r1, [r6, #0]
 80022b0:	4605      	mov	r5, r0
 80022b2:	b911      	cbnz	r1, 80022ba <sbrk_aligned+0x12>
 80022b4:	f000 fcba 	bl	8002c2c <_sbrk_r>
 80022b8:	6030      	str	r0, [r6, #0]
 80022ba:	4621      	mov	r1, r4
 80022bc:	4628      	mov	r0, r5
 80022be:	f000 fcb5 	bl	8002c2c <_sbrk_r>
 80022c2:	1c43      	adds	r3, r0, #1
 80022c4:	d00a      	beq.n	80022dc <sbrk_aligned+0x34>
 80022c6:	1cc4      	adds	r4, r0, #3
 80022c8:	f024 0403 	bic.w	r4, r4, #3
 80022cc:	42a0      	cmp	r0, r4
 80022ce:	d007      	beq.n	80022e0 <sbrk_aligned+0x38>
 80022d0:	1a21      	subs	r1, r4, r0
 80022d2:	4628      	mov	r0, r5
 80022d4:	f000 fcaa 	bl	8002c2c <_sbrk_r>
 80022d8:	3001      	adds	r0, #1
 80022da:	d101      	bne.n	80022e0 <sbrk_aligned+0x38>
 80022dc:	f04f 34ff 	mov.w	r4, #4294967295
 80022e0:	4620      	mov	r0, r4
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
 80022e4:	20000540 	.word	0x20000540

080022e8 <_malloc_r>:
 80022e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022ec:	1ccd      	adds	r5, r1, #3
 80022ee:	f025 0503 	bic.w	r5, r5, #3
 80022f2:	3508      	adds	r5, #8
 80022f4:	2d0c      	cmp	r5, #12
 80022f6:	bf38      	it	cc
 80022f8:	250c      	movcc	r5, #12
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	4607      	mov	r7, r0
 80022fe:	db01      	blt.n	8002304 <_malloc_r+0x1c>
 8002300:	42a9      	cmp	r1, r5
 8002302:	d905      	bls.n	8002310 <_malloc_r+0x28>
 8002304:	230c      	movs	r3, #12
 8002306:	2600      	movs	r6, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4630      	mov	r0, r6
 800230c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002310:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80023e4 <_malloc_r+0xfc>
 8002314:	f000 f868 	bl	80023e8 <__malloc_lock>
 8002318:	f8d8 3000 	ldr.w	r3, [r8]
 800231c:	461c      	mov	r4, r3
 800231e:	bb5c      	cbnz	r4, 8002378 <_malloc_r+0x90>
 8002320:	4629      	mov	r1, r5
 8002322:	4638      	mov	r0, r7
 8002324:	f7ff ffc0 	bl	80022a8 <sbrk_aligned>
 8002328:	1c43      	adds	r3, r0, #1
 800232a:	4604      	mov	r4, r0
 800232c:	d155      	bne.n	80023da <_malloc_r+0xf2>
 800232e:	f8d8 4000 	ldr.w	r4, [r8]
 8002332:	4626      	mov	r6, r4
 8002334:	2e00      	cmp	r6, #0
 8002336:	d145      	bne.n	80023c4 <_malloc_r+0xdc>
 8002338:	2c00      	cmp	r4, #0
 800233a:	d048      	beq.n	80023ce <_malloc_r+0xe6>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	4631      	mov	r1, r6
 8002340:	4638      	mov	r0, r7
 8002342:	eb04 0903 	add.w	r9, r4, r3
 8002346:	f000 fc71 	bl	8002c2c <_sbrk_r>
 800234a:	4581      	cmp	r9, r0
 800234c:	d13f      	bne.n	80023ce <_malloc_r+0xe6>
 800234e:	6821      	ldr	r1, [r4, #0]
 8002350:	4638      	mov	r0, r7
 8002352:	1a6d      	subs	r5, r5, r1
 8002354:	4629      	mov	r1, r5
 8002356:	f7ff ffa7 	bl	80022a8 <sbrk_aligned>
 800235a:	3001      	adds	r0, #1
 800235c:	d037      	beq.n	80023ce <_malloc_r+0xe6>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	442b      	add	r3, r5
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	f8d8 3000 	ldr.w	r3, [r8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d038      	beq.n	80023de <_malloc_r+0xf6>
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	42a2      	cmp	r2, r4
 8002370:	d12b      	bne.n	80023ca <_malloc_r+0xe2>
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	e00f      	b.n	8002398 <_malloc_r+0xb0>
 8002378:	6822      	ldr	r2, [r4, #0]
 800237a:	1b52      	subs	r2, r2, r5
 800237c:	d41f      	bmi.n	80023be <_malloc_r+0xd6>
 800237e:	2a0b      	cmp	r2, #11
 8002380:	d917      	bls.n	80023b2 <_malloc_r+0xca>
 8002382:	1961      	adds	r1, r4, r5
 8002384:	42a3      	cmp	r3, r4
 8002386:	6025      	str	r5, [r4, #0]
 8002388:	bf18      	it	ne
 800238a:	6059      	strne	r1, [r3, #4]
 800238c:	6863      	ldr	r3, [r4, #4]
 800238e:	bf08      	it	eq
 8002390:	f8c8 1000 	streq.w	r1, [r8]
 8002394:	5162      	str	r2, [r4, r5]
 8002396:	604b      	str	r3, [r1, #4]
 8002398:	4638      	mov	r0, r7
 800239a:	f104 060b 	add.w	r6, r4, #11
 800239e:	f000 f829 	bl	80023f4 <__malloc_unlock>
 80023a2:	f026 0607 	bic.w	r6, r6, #7
 80023a6:	1d23      	adds	r3, r4, #4
 80023a8:	1af2      	subs	r2, r6, r3
 80023aa:	d0ae      	beq.n	800230a <_malloc_r+0x22>
 80023ac:	1b9b      	subs	r3, r3, r6
 80023ae:	50a3      	str	r3, [r4, r2]
 80023b0:	e7ab      	b.n	800230a <_malloc_r+0x22>
 80023b2:	42a3      	cmp	r3, r4
 80023b4:	6862      	ldr	r2, [r4, #4]
 80023b6:	d1dd      	bne.n	8002374 <_malloc_r+0x8c>
 80023b8:	f8c8 2000 	str.w	r2, [r8]
 80023bc:	e7ec      	b.n	8002398 <_malloc_r+0xb0>
 80023be:	4623      	mov	r3, r4
 80023c0:	6864      	ldr	r4, [r4, #4]
 80023c2:	e7ac      	b.n	800231e <_malloc_r+0x36>
 80023c4:	4634      	mov	r4, r6
 80023c6:	6876      	ldr	r6, [r6, #4]
 80023c8:	e7b4      	b.n	8002334 <_malloc_r+0x4c>
 80023ca:	4613      	mov	r3, r2
 80023cc:	e7cc      	b.n	8002368 <_malloc_r+0x80>
 80023ce:	230c      	movs	r3, #12
 80023d0:	4638      	mov	r0, r7
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	f000 f80e 	bl	80023f4 <__malloc_unlock>
 80023d8:	e797      	b.n	800230a <_malloc_r+0x22>
 80023da:	6025      	str	r5, [r4, #0]
 80023dc:	e7dc      	b.n	8002398 <_malloc_r+0xb0>
 80023de:	605b      	str	r3, [r3, #4]
 80023e0:	deff      	udf	#255	; 0xff
 80023e2:	bf00      	nop
 80023e4:	2000053c 	.word	0x2000053c

080023e8 <__malloc_lock>:
 80023e8:	4801      	ldr	r0, [pc, #4]	; (80023f0 <__malloc_lock+0x8>)
 80023ea:	f7ff bf12 	b.w	8002212 <__retarget_lock_acquire_recursive>
 80023ee:	bf00      	nop
 80023f0:	20000538 	.word	0x20000538

080023f4 <__malloc_unlock>:
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <__malloc_unlock+0x8>)
 80023f6:	f7ff bf0d 	b.w	8002214 <__retarget_lock_release_recursive>
 80023fa:	bf00      	nop
 80023fc:	20000538 	.word	0x20000538

08002400 <__sfputc_r>:
 8002400:	6893      	ldr	r3, [r2, #8]
 8002402:	b410      	push	{r4}
 8002404:	3b01      	subs	r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	6093      	str	r3, [r2, #8]
 800240a:	da07      	bge.n	800241c <__sfputc_r+0x1c>
 800240c:	6994      	ldr	r4, [r2, #24]
 800240e:	42a3      	cmp	r3, r4
 8002410:	db01      	blt.n	8002416 <__sfputc_r+0x16>
 8002412:	290a      	cmp	r1, #10
 8002414:	d102      	bne.n	800241c <__sfputc_r+0x1c>
 8002416:	bc10      	pop	{r4}
 8002418:	f000 bb72 	b.w	8002b00 <__swbuf_r>
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	1c58      	adds	r0, r3, #1
 8002420:	6010      	str	r0, [r2, #0]
 8002422:	7019      	strb	r1, [r3, #0]
 8002424:	4608      	mov	r0, r1
 8002426:	bc10      	pop	{r4}
 8002428:	4770      	bx	lr

0800242a <__sfputs_r>:
 800242a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242c:	4606      	mov	r6, r0
 800242e:	460f      	mov	r7, r1
 8002430:	4614      	mov	r4, r2
 8002432:	18d5      	adds	r5, r2, r3
 8002434:	42ac      	cmp	r4, r5
 8002436:	d101      	bne.n	800243c <__sfputs_r+0x12>
 8002438:	2000      	movs	r0, #0
 800243a:	e007      	b.n	800244c <__sfputs_r+0x22>
 800243c:	463a      	mov	r2, r7
 800243e:	4630      	mov	r0, r6
 8002440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002444:	f7ff ffdc 	bl	8002400 <__sfputc_r>
 8002448:	1c43      	adds	r3, r0, #1
 800244a:	d1f3      	bne.n	8002434 <__sfputs_r+0xa>
 800244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002450 <_vfiprintf_r>:
 8002450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002454:	460d      	mov	r5, r1
 8002456:	4614      	mov	r4, r2
 8002458:	4698      	mov	r8, r3
 800245a:	4606      	mov	r6, r0
 800245c:	b09d      	sub	sp, #116	; 0x74
 800245e:	b118      	cbz	r0, 8002468 <_vfiprintf_r+0x18>
 8002460:	6a03      	ldr	r3, [r0, #32]
 8002462:	b90b      	cbnz	r3, 8002468 <_vfiprintf_r+0x18>
 8002464:	f7ff fdd0 	bl	8002008 <__sinit>
 8002468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800246a:	07d9      	lsls	r1, r3, #31
 800246c:	d405      	bmi.n	800247a <_vfiprintf_r+0x2a>
 800246e:	89ab      	ldrh	r3, [r5, #12]
 8002470:	059a      	lsls	r2, r3, #22
 8002472:	d402      	bmi.n	800247a <_vfiprintf_r+0x2a>
 8002474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002476:	f7ff fecc 	bl	8002212 <__retarget_lock_acquire_recursive>
 800247a:	89ab      	ldrh	r3, [r5, #12]
 800247c:	071b      	lsls	r3, r3, #28
 800247e:	d501      	bpl.n	8002484 <_vfiprintf_r+0x34>
 8002480:	692b      	ldr	r3, [r5, #16]
 8002482:	b99b      	cbnz	r3, 80024ac <_vfiprintf_r+0x5c>
 8002484:	4629      	mov	r1, r5
 8002486:	4630      	mov	r0, r6
 8002488:	f000 fb78 	bl	8002b7c <__swsetup_r>
 800248c:	b170      	cbz	r0, 80024ac <_vfiprintf_r+0x5c>
 800248e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002490:	07dc      	lsls	r4, r3, #31
 8002492:	d504      	bpl.n	800249e <_vfiprintf_r+0x4e>
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	b01d      	add	sp, #116	; 0x74
 800249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249e:	89ab      	ldrh	r3, [r5, #12]
 80024a0:	0598      	lsls	r0, r3, #22
 80024a2:	d4f7      	bmi.n	8002494 <_vfiprintf_r+0x44>
 80024a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024a6:	f7ff feb5 	bl	8002214 <__retarget_lock_release_recursive>
 80024aa:	e7f3      	b.n	8002494 <_vfiprintf_r+0x44>
 80024ac:	2300      	movs	r3, #0
 80024ae:	9309      	str	r3, [sp, #36]	; 0x24
 80024b0:	2320      	movs	r3, #32
 80024b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024b6:	2330      	movs	r3, #48	; 0x30
 80024b8:	f04f 0901 	mov.w	r9, #1
 80024bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80024c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002670 <_vfiprintf_r+0x220>
 80024c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024c8:	4623      	mov	r3, r4
 80024ca:	469a      	mov	sl, r3
 80024cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024d0:	b10a      	cbz	r2, 80024d6 <_vfiprintf_r+0x86>
 80024d2:	2a25      	cmp	r2, #37	; 0x25
 80024d4:	d1f9      	bne.n	80024ca <_vfiprintf_r+0x7a>
 80024d6:	ebba 0b04 	subs.w	fp, sl, r4
 80024da:	d00b      	beq.n	80024f4 <_vfiprintf_r+0xa4>
 80024dc:	465b      	mov	r3, fp
 80024de:	4622      	mov	r2, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	4630      	mov	r0, r6
 80024e4:	f7ff ffa1 	bl	800242a <__sfputs_r>
 80024e8:	3001      	adds	r0, #1
 80024ea:	f000 80a9 	beq.w	8002640 <_vfiprintf_r+0x1f0>
 80024ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024f0:	445a      	add	r2, fp
 80024f2:	9209      	str	r2, [sp, #36]	; 0x24
 80024f4:	f89a 3000 	ldrb.w	r3, [sl]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a1 	beq.w	8002640 <_vfiprintf_r+0x1f0>
 80024fe:	2300      	movs	r3, #0
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002508:	f10a 0a01 	add.w	sl, sl, #1
 800250c:	9304      	str	r3, [sp, #16]
 800250e:	9307      	str	r3, [sp, #28]
 8002510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002514:	931a      	str	r3, [sp, #104]	; 0x68
 8002516:	4654      	mov	r4, sl
 8002518:	2205      	movs	r2, #5
 800251a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800251e:	4854      	ldr	r0, [pc, #336]	; (8002670 <_vfiprintf_r+0x220>)
 8002520:	f000 fb94 	bl	8002c4c <memchr>
 8002524:	9a04      	ldr	r2, [sp, #16]
 8002526:	b9d8      	cbnz	r0, 8002560 <_vfiprintf_r+0x110>
 8002528:	06d1      	lsls	r1, r2, #27
 800252a:	bf44      	itt	mi
 800252c:	2320      	movmi	r3, #32
 800252e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002532:	0713      	lsls	r3, r2, #28
 8002534:	bf44      	itt	mi
 8002536:	232b      	movmi	r3, #43	; 0x2b
 8002538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800253c:	f89a 3000 	ldrb.w	r3, [sl]
 8002540:	2b2a      	cmp	r3, #42	; 0x2a
 8002542:	d015      	beq.n	8002570 <_vfiprintf_r+0x120>
 8002544:	4654      	mov	r4, sl
 8002546:	2000      	movs	r0, #0
 8002548:	f04f 0c0a 	mov.w	ip, #10
 800254c:	9a07      	ldr	r2, [sp, #28]
 800254e:	4621      	mov	r1, r4
 8002550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	2b09      	cmp	r3, #9
 8002558:	d94d      	bls.n	80025f6 <_vfiprintf_r+0x1a6>
 800255a:	b1b0      	cbz	r0, 800258a <_vfiprintf_r+0x13a>
 800255c:	9207      	str	r2, [sp, #28]
 800255e:	e014      	b.n	800258a <_vfiprintf_r+0x13a>
 8002560:	eba0 0308 	sub.w	r3, r0, r8
 8002564:	fa09 f303 	lsl.w	r3, r9, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	46a2      	mov	sl, r4
 800256c:	9304      	str	r3, [sp, #16]
 800256e:	e7d2      	b.n	8002516 <_vfiprintf_r+0xc6>
 8002570:	9b03      	ldr	r3, [sp, #12]
 8002572:	1d19      	adds	r1, r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	9103      	str	r1, [sp, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	bfbb      	ittet	lt
 800257c:	425b      	neglt	r3, r3
 800257e:	f042 0202 	orrlt.w	r2, r2, #2
 8002582:	9307      	strge	r3, [sp, #28]
 8002584:	9307      	strlt	r3, [sp, #28]
 8002586:	bfb8      	it	lt
 8002588:	9204      	strlt	r2, [sp, #16]
 800258a:	7823      	ldrb	r3, [r4, #0]
 800258c:	2b2e      	cmp	r3, #46	; 0x2e
 800258e:	d10c      	bne.n	80025aa <_vfiprintf_r+0x15a>
 8002590:	7863      	ldrb	r3, [r4, #1]
 8002592:	2b2a      	cmp	r3, #42	; 0x2a
 8002594:	d134      	bne.n	8002600 <_vfiprintf_r+0x1b0>
 8002596:	9b03      	ldr	r3, [sp, #12]
 8002598:	3402      	adds	r4, #2
 800259a:	1d1a      	adds	r2, r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	9203      	str	r2, [sp, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bfb8      	it	lt
 80025a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80025a8:	9305      	str	r3, [sp, #20]
 80025aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002674 <_vfiprintf_r+0x224>
 80025ae:	2203      	movs	r2, #3
 80025b0:	4650      	mov	r0, sl
 80025b2:	7821      	ldrb	r1, [r4, #0]
 80025b4:	f000 fb4a 	bl	8002c4c <memchr>
 80025b8:	b138      	cbz	r0, 80025ca <_vfiprintf_r+0x17a>
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	9b04      	ldr	r3, [sp, #16]
 80025be:	eba0 000a 	sub.w	r0, r0, sl
 80025c2:	4082      	lsls	r2, r0
 80025c4:	4313      	orrs	r3, r2
 80025c6:	3401      	adds	r4, #1
 80025c8:	9304      	str	r3, [sp, #16]
 80025ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ce:	2206      	movs	r2, #6
 80025d0:	4829      	ldr	r0, [pc, #164]	; (8002678 <_vfiprintf_r+0x228>)
 80025d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025d6:	f000 fb39 	bl	8002c4c <memchr>
 80025da:	2800      	cmp	r0, #0
 80025dc:	d03f      	beq.n	800265e <_vfiprintf_r+0x20e>
 80025de:	4b27      	ldr	r3, [pc, #156]	; (800267c <_vfiprintf_r+0x22c>)
 80025e0:	bb1b      	cbnz	r3, 800262a <_vfiprintf_r+0x1da>
 80025e2:	9b03      	ldr	r3, [sp, #12]
 80025e4:	3307      	adds	r3, #7
 80025e6:	f023 0307 	bic.w	r3, r3, #7
 80025ea:	3308      	adds	r3, #8
 80025ec:	9303      	str	r3, [sp, #12]
 80025ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025f0:	443b      	add	r3, r7
 80025f2:	9309      	str	r3, [sp, #36]	; 0x24
 80025f4:	e768      	b.n	80024c8 <_vfiprintf_r+0x78>
 80025f6:	460c      	mov	r4, r1
 80025f8:	2001      	movs	r0, #1
 80025fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80025fe:	e7a6      	b.n	800254e <_vfiprintf_r+0xfe>
 8002600:	2300      	movs	r3, #0
 8002602:	f04f 0c0a 	mov.w	ip, #10
 8002606:	4619      	mov	r1, r3
 8002608:	3401      	adds	r4, #1
 800260a:	9305      	str	r3, [sp, #20]
 800260c:	4620      	mov	r0, r4
 800260e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002612:	3a30      	subs	r2, #48	; 0x30
 8002614:	2a09      	cmp	r2, #9
 8002616:	d903      	bls.n	8002620 <_vfiprintf_r+0x1d0>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0c6      	beq.n	80025aa <_vfiprintf_r+0x15a>
 800261c:	9105      	str	r1, [sp, #20]
 800261e:	e7c4      	b.n	80025aa <_vfiprintf_r+0x15a>
 8002620:	4604      	mov	r4, r0
 8002622:	2301      	movs	r3, #1
 8002624:	fb0c 2101 	mla	r1, ip, r1, r2
 8002628:	e7f0      	b.n	800260c <_vfiprintf_r+0x1bc>
 800262a:	ab03      	add	r3, sp, #12
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	462a      	mov	r2, r5
 8002630:	4630      	mov	r0, r6
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <_vfiprintf_r+0x230>)
 8002634:	a904      	add	r1, sp, #16
 8002636:	f3af 8000 	nop.w
 800263a:	4607      	mov	r7, r0
 800263c:	1c78      	adds	r0, r7, #1
 800263e:	d1d6      	bne.n	80025ee <_vfiprintf_r+0x19e>
 8002640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002642:	07d9      	lsls	r1, r3, #31
 8002644:	d405      	bmi.n	8002652 <_vfiprintf_r+0x202>
 8002646:	89ab      	ldrh	r3, [r5, #12]
 8002648:	059a      	lsls	r2, r3, #22
 800264a:	d402      	bmi.n	8002652 <_vfiprintf_r+0x202>
 800264c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800264e:	f7ff fde1 	bl	8002214 <__retarget_lock_release_recursive>
 8002652:	89ab      	ldrh	r3, [r5, #12]
 8002654:	065b      	lsls	r3, r3, #25
 8002656:	f53f af1d 	bmi.w	8002494 <_vfiprintf_r+0x44>
 800265a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800265c:	e71c      	b.n	8002498 <_vfiprintf_r+0x48>
 800265e:	ab03      	add	r3, sp, #12
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	462a      	mov	r2, r5
 8002664:	4630      	mov	r0, r6
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <_vfiprintf_r+0x230>)
 8002668:	a904      	add	r1, sp, #16
 800266a:	f000 f87d 	bl	8002768 <_printf_i>
 800266e:	e7e4      	b.n	800263a <_vfiprintf_r+0x1ea>
 8002670:	08002dbe 	.word	0x08002dbe
 8002674:	08002dc4 	.word	0x08002dc4
 8002678:	08002dc8 	.word	0x08002dc8
 800267c:	00000000 	.word	0x00000000
 8002680:	0800242b 	.word	0x0800242b

08002684 <_printf_common>:
 8002684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002688:	4616      	mov	r6, r2
 800268a:	4699      	mov	r9, r3
 800268c:	688a      	ldr	r2, [r1, #8]
 800268e:	690b      	ldr	r3, [r1, #16]
 8002690:	4607      	mov	r7, r0
 8002692:	4293      	cmp	r3, r2
 8002694:	bfb8      	it	lt
 8002696:	4613      	movlt	r3, r2
 8002698:	6033      	str	r3, [r6, #0]
 800269a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800269e:	460c      	mov	r4, r1
 80026a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026a4:	b10a      	cbz	r2, 80026aa <_printf_common+0x26>
 80026a6:	3301      	adds	r3, #1
 80026a8:	6033      	str	r3, [r6, #0]
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	0699      	lsls	r1, r3, #26
 80026ae:	bf42      	ittt	mi
 80026b0:	6833      	ldrmi	r3, [r6, #0]
 80026b2:	3302      	addmi	r3, #2
 80026b4:	6033      	strmi	r3, [r6, #0]
 80026b6:	6825      	ldr	r5, [r4, #0]
 80026b8:	f015 0506 	ands.w	r5, r5, #6
 80026bc:	d106      	bne.n	80026cc <_printf_common+0x48>
 80026be:	f104 0a19 	add.w	sl, r4, #25
 80026c2:	68e3      	ldr	r3, [r4, #12]
 80026c4:	6832      	ldr	r2, [r6, #0]
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	42ab      	cmp	r3, r5
 80026ca:	dc2b      	bgt.n	8002724 <_printf_common+0xa0>
 80026cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026d0:	1e13      	subs	r3, r2, #0
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	bf18      	it	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	0692      	lsls	r2, r2, #26
 80026da:	d430      	bmi.n	800273e <_printf_common+0xba>
 80026dc:	4649      	mov	r1, r9
 80026de:	4638      	mov	r0, r7
 80026e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026e4:	47c0      	blx	r8
 80026e6:	3001      	adds	r0, #1
 80026e8:	d023      	beq.n	8002732 <_printf_common+0xae>
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	6922      	ldr	r2, [r4, #16]
 80026ee:	f003 0306 	and.w	r3, r3, #6
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf14      	ite	ne
 80026f6:	2500      	movne	r5, #0
 80026f8:	6833      	ldreq	r3, [r6, #0]
 80026fa:	f04f 0600 	mov.w	r6, #0
 80026fe:	bf08      	it	eq
 8002700:	68e5      	ldreq	r5, [r4, #12]
 8002702:	f104 041a 	add.w	r4, r4, #26
 8002706:	bf08      	it	eq
 8002708:	1aed      	subeq	r5, r5, r3
 800270a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800270e:	bf08      	it	eq
 8002710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002714:	4293      	cmp	r3, r2
 8002716:	bfc4      	itt	gt
 8002718:	1a9b      	subgt	r3, r3, r2
 800271a:	18ed      	addgt	r5, r5, r3
 800271c:	42b5      	cmp	r5, r6
 800271e:	d11a      	bne.n	8002756 <_printf_common+0xd2>
 8002720:	2000      	movs	r0, #0
 8002722:	e008      	b.n	8002736 <_printf_common+0xb2>
 8002724:	2301      	movs	r3, #1
 8002726:	4652      	mov	r2, sl
 8002728:	4649      	mov	r1, r9
 800272a:	4638      	mov	r0, r7
 800272c:	47c0      	blx	r8
 800272e:	3001      	adds	r0, #1
 8002730:	d103      	bne.n	800273a <_printf_common+0xb6>
 8002732:	f04f 30ff 	mov.w	r0, #4294967295
 8002736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273a:	3501      	adds	r5, #1
 800273c:	e7c1      	b.n	80026c2 <_printf_common+0x3e>
 800273e:	2030      	movs	r0, #48	; 0x30
 8002740:	18e1      	adds	r1, r4, r3
 8002742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800274c:	4422      	add	r2, r4
 800274e:	3302      	adds	r3, #2
 8002750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002754:	e7c2      	b.n	80026dc <_printf_common+0x58>
 8002756:	2301      	movs	r3, #1
 8002758:	4622      	mov	r2, r4
 800275a:	4649      	mov	r1, r9
 800275c:	4638      	mov	r0, r7
 800275e:	47c0      	blx	r8
 8002760:	3001      	adds	r0, #1
 8002762:	d0e6      	beq.n	8002732 <_printf_common+0xae>
 8002764:	3601      	adds	r6, #1
 8002766:	e7d9      	b.n	800271c <_printf_common+0x98>

08002768 <_printf_i>:
 8002768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800276c:	7e0f      	ldrb	r7, [r1, #24]
 800276e:	4691      	mov	r9, r2
 8002770:	2f78      	cmp	r7, #120	; 0x78
 8002772:	4680      	mov	r8, r0
 8002774:	460c      	mov	r4, r1
 8002776:	469a      	mov	sl, r3
 8002778:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800277a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800277e:	d807      	bhi.n	8002790 <_printf_i+0x28>
 8002780:	2f62      	cmp	r7, #98	; 0x62
 8002782:	d80a      	bhi.n	800279a <_printf_i+0x32>
 8002784:	2f00      	cmp	r7, #0
 8002786:	f000 80d5 	beq.w	8002934 <_printf_i+0x1cc>
 800278a:	2f58      	cmp	r7, #88	; 0x58
 800278c:	f000 80c1 	beq.w	8002912 <_printf_i+0x1aa>
 8002790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002798:	e03a      	b.n	8002810 <_printf_i+0xa8>
 800279a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800279e:	2b15      	cmp	r3, #21
 80027a0:	d8f6      	bhi.n	8002790 <_printf_i+0x28>
 80027a2:	a101      	add	r1, pc, #4	; (adr r1, 80027a8 <_printf_i+0x40>)
 80027a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027a8:	08002801 	.word	0x08002801
 80027ac:	08002815 	.word	0x08002815
 80027b0:	08002791 	.word	0x08002791
 80027b4:	08002791 	.word	0x08002791
 80027b8:	08002791 	.word	0x08002791
 80027bc:	08002791 	.word	0x08002791
 80027c0:	08002815 	.word	0x08002815
 80027c4:	08002791 	.word	0x08002791
 80027c8:	08002791 	.word	0x08002791
 80027cc:	08002791 	.word	0x08002791
 80027d0:	08002791 	.word	0x08002791
 80027d4:	0800291b 	.word	0x0800291b
 80027d8:	08002841 	.word	0x08002841
 80027dc:	080028d5 	.word	0x080028d5
 80027e0:	08002791 	.word	0x08002791
 80027e4:	08002791 	.word	0x08002791
 80027e8:	0800293d 	.word	0x0800293d
 80027ec:	08002791 	.word	0x08002791
 80027f0:	08002841 	.word	0x08002841
 80027f4:	08002791 	.word	0x08002791
 80027f8:	08002791 	.word	0x08002791
 80027fc:	080028dd 	.word	0x080028dd
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	1d1a      	adds	r2, r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	602a      	str	r2, [r5, #0]
 8002808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800280c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002810:	2301      	movs	r3, #1
 8002812:	e0a0      	b.n	8002956 <_printf_i+0x1ee>
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	0607      	lsls	r7, r0, #24
 800281a:	f103 0104 	add.w	r1, r3, #4
 800281e:	6029      	str	r1, [r5, #0]
 8002820:	d501      	bpl.n	8002826 <_printf_i+0xbe>
 8002822:	681e      	ldr	r6, [r3, #0]
 8002824:	e003      	b.n	800282e <_printf_i+0xc6>
 8002826:	0646      	lsls	r6, r0, #25
 8002828:	d5fb      	bpl.n	8002822 <_printf_i+0xba>
 800282a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800282e:	2e00      	cmp	r6, #0
 8002830:	da03      	bge.n	800283a <_printf_i+0xd2>
 8002832:	232d      	movs	r3, #45	; 0x2d
 8002834:	4276      	negs	r6, r6
 8002836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800283a:	230a      	movs	r3, #10
 800283c:	4859      	ldr	r0, [pc, #356]	; (80029a4 <_printf_i+0x23c>)
 800283e:	e012      	b.n	8002866 <_printf_i+0xfe>
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	1d19      	adds	r1, r3, #4
 8002846:	6029      	str	r1, [r5, #0]
 8002848:	0605      	lsls	r5, r0, #24
 800284a:	d501      	bpl.n	8002850 <_printf_i+0xe8>
 800284c:	681e      	ldr	r6, [r3, #0]
 800284e:	e002      	b.n	8002856 <_printf_i+0xee>
 8002850:	0641      	lsls	r1, r0, #25
 8002852:	d5fb      	bpl.n	800284c <_printf_i+0xe4>
 8002854:	881e      	ldrh	r6, [r3, #0]
 8002856:	2f6f      	cmp	r7, #111	; 0x6f
 8002858:	bf0c      	ite	eq
 800285a:	2308      	moveq	r3, #8
 800285c:	230a      	movne	r3, #10
 800285e:	4851      	ldr	r0, [pc, #324]	; (80029a4 <_printf_i+0x23c>)
 8002860:	2100      	movs	r1, #0
 8002862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002866:	6865      	ldr	r5, [r4, #4]
 8002868:	2d00      	cmp	r5, #0
 800286a:	bfa8      	it	ge
 800286c:	6821      	ldrge	r1, [r4, #0]
 800286e:	60a5      	str	r5, [r4, #8]
 8002870:	bfa4      	itt	ge
 8002872:	f021 0104 	bicge.w	r1, r1, #4
 8002876:	6021      	strge	r1, [r4, #0]
 8002878:	b90e      	cbnz	r6, 800287e <_printf_i+0x116>
 800287a:	2d00      	cmp	r5, #0
 800287c:	d04b      	beq.n	8002916 <_printf_i+0x1ae>
 800287e:	4615      	mov	r5, r2
 8002880:	fbb6 f1f3 	udiv	r1, r6, r3
 8002884:	fb03 6711 	mls	r7, r3, r1, r6
 8002888:	5dc7      	ldrb	r7, [r0, r7]
 800288a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800288e:	4637      	mov	r7, r6
 8002890:	42bb      	cmp	r3, r7
 8002892:	460e      	mov	r6, r1
 8002894:	d9f4      	bls.n	8002880 <_printf_i+0x118>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d10b      	bne.n	80028b2 <_printf_i+0x14a>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	07de      	lsls	r6, r3, #31
 800289e:	d508      	bpl.n	80028b2 <_printf_i+0x14a>
 80028a0:	6923      	ldr	r3, [r4, #16]
 80028a2:	6861      	ldr	r1, [r4, #4]
 80028a4:	4299      	cmp	r1, r3
 80028a6:	bfde      	ittt	le
 80028a8:	2330      	movle	r3, #48	; 0x30
 80028aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028b2:	1b52      	subs	r2, r2, r5
 80028b4:	6122      	str	r2, [r4, #16]
 80028b6:	464b      	mov	r3, r9
 80028b8:	4621      	mov	r1, r4
 80028ba:	4640      	mov	r0, r8
 80028bc:	f8cd a000 	str.w	sl, [sp]
 80028c0:	aa03      	add	r2, sp, #12
 80028c2:	f7ff fedf 	bl	8002684 <_printf_common>
 80028c6:	3001      	adds	r0, #1
 80028c8:	d14a      	bne.n	8002960 <_printf_i+0x1f8>
 80028ca:	f04f 30ff 	mov.w	r0, #4294967295
 80028ce:	b004      	add	sp, #16
 80028d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	2778      	movs	r7, #120	; 0x78
 80028de:	4832      	ldr	r0, [pc, #200]	; (80029a8 <_printf_i+0x240>)
 80028e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	6829      	ldr	r1, [r5, #0]
 80028e8:	061f      	lsls	r7, r3, #24
 80028ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80028ee:	d402      	bmi.n	80028f6 <_printf_i+0x18e>
 80028f0:	065f      	lsls	r7, r3, #25
 80028f2:	bf48      	it	mi
 80028f4:	b2b6      	uxthmi	r6, r6
 80028f6:	07df      	lsls	r7, r3, #31
 80028f8:	bf48      	it	mi
 80028fa:	f043 0320 	orrmi.w	r3, r3, #32
 80028fe:	6029      	str	r1, [r5, #0]
 8002900:	bf48      	it	mi
 8002902:	6023      	strmi	r3, [r4, #0]
 8002904:	b91e      	cbnz	r6, 800290e <_printf_i+0x1a6>
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	f023 0320 	bic.w	r3, r3, #32
 800290c:	6023      	str	r3, [r4, #0]
 800290e:	2310      	movs	r3, #16
 8002910:	e7a6      	b.n	8002860 <_printf_i+0xf8>
 8002912:	4824      	ldr	r0, [pc, #144]	; (80029a4 <_printf_i+0x23c>)
 8002914:	e7e4      	b.n	80028e0 <_printf_i+0x178>
 8002916:	4615      	mov	r5, r2
 8002918:	e7bd      	b.n	8002896 <_printf_i+0x12e>
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	6826      	ldr	r6, [r4, #0]
 800291e:	1d18      	adds	r0, r3, #4
 8002920:	6961      	ldr	r1, [r4, #20]
 8002922:	6028      	str	r0, [r5, #0]
 8002924:	0635      	lsls	r5, r6, #24
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	d501      	bpl.n	800292e <_printf_i+0x1c6>
 800292a:	6019      	str	r1, [r3, #0]
 800292c:	e002      	b.n	8002934 <_printf_i+0x1cc>
 800292e:	0670      	lsls	r0, r6, #25
 8002930:	d5fb      	bpl.n	800292a <_printf_i+0x1c2>
 8002932:	8019      	strh	r1, [r3, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	4615      	mov	r5, r2
 8002938:	6123      	str	r3, [r4, #16]
 800293a:	e7bc      	b.n	80028b6 <_printf_i+0x14e>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	2100      	movs	r1, #0
 8002940:	1d1a      	adds	r2, r3, #4
 8002942:	602a      	str	r2, [r5, #0]
 8002944:	681d      	ldr	r5, [r3, #0]
 8002946:	6862      	ldr	r2, [r4, #4]
 8002948:	4628      	mov	r0, r5
 800294a:	f000 f97f 	bl	8002c4c <memchr>
 800294e:	b108      	cbz	r0, 8002954 <_printf_i+0x1ec>
 8002950:	1b40      	subs	r0, r0, r5
 8002952:	6060      	str	r0, [r4, #4]
 8002954:	6863      	ldr	r3, [r4, #4]
 8002956:	6123      	str	r3, [r4, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295e:	e7aa      	b.n	80028b6 <_printf_i+0x14e>
 8002960:	462a      	mov	r2, r5
 8002962:	4649      	mov	r1, r9
 8002964:	4640      	mov	r0, r8
 8002966:	6923      	ldr	r3, [r4, #16]
 8002968:	47d0      	blx	sl
 800296a:	3001      	adds	r0, #1
 800296c:	d0ad      	beq.n	80028ca <_printf_i+0x162>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	079b      	lsls	r3, r3, #30
 8002972:	d413      	bmi.n	800299c <_printf_i+0x234>
 8002974:	68e0      	ldr	r0, [r4, #12]
 8002976:	9b03      	ldr	r3, [sp, #12]
 8002978:	4298      	cmp	r0, r3
 800297a:	bfb8      	it	lt
 800297c:	4618      	movlt	r0, r3
 800297e:	e7a6      	b.n	80028ce <_printf_i+0x166>
 8002980:	2301      	movs	r3, #1
 8002982:	4632      	mov	r2, r6
 8002984:	4649      	mov	r1, r9
 8002986:	4640      	mov	r0, r8
 8002988:	47d0      	blx	sl
 800298a:	3001      	adds	r0, #1
 800298c:	d09d      	beq.n	80028ca <_printf_i+0x162>
 800298e:	3501      	adds	r5, #1
 8002990:	68e3      	ldr	r3, [r4, #12]
 8002992:	9903      	ldr	r1, [sp, #12]
 8002994:	1a5b      	subs	r3, r3, r1
 8002996:	42ab      	cmp	r3, r5
 8002998:	dcf2      	bgt.n	8002980 <_printf_i+0x218>
 800299a:	e7eb      	b.n	8002974 <_printf_i+0x20c>
 800299c:	2500      	movs	r5, #0
 800299e:	f104 0619 	add.w	r6, r4, #25
 80029a2:	e7f5      	b.n	8002990 <_printf_i+0x228>
 80029a4:	08002dcf 	.word	0x08002dcf
 80029a8:	08002de0 	.word	0x08002de0

080029ac <__sflush_r>:
 80029ac:	898a      	ldrh	r2, [r1, #12]
 80029ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b0:	4605      	mov	r5, r0
 80029b2:	0710      	lsls	r0, r2, #28
 80029b4:	460c      	mov	r4, r1
 80029b6:	d457      	bmi.n	8002a68 <__sflush_r+0xbc>
 80029b8:	684b      	ldr	r3, [r1, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	dc04      	bgt.n	80029c8 <__sflush_r+0x1c>
 80029be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	dc01      	bgt.n	80029c8 <__sflush_r+0x1c>
 80029c4:	2000      	movs	r0, #0
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d0fa      	beq.n	80029c4 <__sflush_r+0x18>
 80029ce:	2300      	movs	r3, #0
 80029d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029d4:	682f      	ldr	r7, [r5, #0]
 80029d6:	6a21      	ldr	r1, [r4, #32]
 80029d8:	602b      	str	r3, [r5, #0]
 80029da:	d032      	beq.n	8002a42 <__sflush_r+0x96>
 80029dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	075a      	lsls	r2, r3, #29
 80029e2:	d505      	bpl.n	80029f0 <__sflush_r+0x44>
 80029e4:	6863      	ldr	r3, [r4, #4]
 80029e6:	1ac0      	subs	r0, r0, r3
 80029e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029ea:	b10b      	cbz	r3, 80029f0 <__sflush_r+0x44>
 80029ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ee:	1ac0      	subs	r0, r0, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	4602      	mov	r2, r0
 80029f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029f6:	4628      	mov	r0, r5
 80029f8:	6a21      	ldr	r1, [r4, #32]
 80029fa:	47b0      	blx	r6
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	d106      	bne.n	8002a10 <__sflush_r+0x64>
 8002a02:	6829      	ldr	r1, [r5, #0]
 8002a04:	291d      	cmp	r1, #29
 8002a06:	d82b      	bhi.n	8002a60 <__sflush_r+0xb4>
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <__sflush_r+0x100>)
 8002a0a:	410a      	asrs	r2, r1
 8002a0c:	07d6      	lsls	r6, r2, #31
 8002a0e:	d427      	bmi.n	8002a60 <__sflush_r+0xb4>
 8002a10:	2200      	movs	r2, #0
 8002a12:	6062      	str	r2, [r4, #4]
 8002a14:	6922      	ldr	r2, [r4, #16]
 8002a16:	04d9      	lsls	r1, r3, #19
 8002a18:	6022      	str	r2, [r4, #0]
 8002a1a:	d504      	bpl.n	8002a26 <__sflush_r+0x7a>
 8002a1c:	1c42      	adds	r2, r0, #1
 8002a1e:	d101      	bne.n	8002a24 <__sflush_r+0x78>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b903      	cbnz	r3, 8002a26 <__sflush_r+0x7a>
 8002a24:	6560      	str	r0, [r4, #84]	; 0x54
 8002a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a28:	602f      	str	r7, [r5, #0]
 8002a2a:	2900      	cmp	r1, #0
 8002a2c:	d0ca      	beq.n	80029c4 <__sflush_r+0x18>
 8002a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a32:	4299      	cmp	r1, r3
 8002a34:	d002      	beq.n	8002a3c <__sflush_r+0x90>
 8002a36:	4628      	mov	r0, r5
 8002a38:	f7ff fbee 	bl	8002218 <_free_r>
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a40:	e7c1      	b.n	80029c6 <__sflush_r+0x1a>
 8002a42:	2301      	movs	r3, #1
 8002a44:	4628      	mov	r0, r5
 8002a46:	47b0      	blx	r6
 8002a48:	1c41      	adds	r1, r0, #1
 8002a4a:	d1c8      	bne.n	80029de <__sflush_r+0x32>
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0c5      	beq.n	80029de <__sflush_r+0x32>
 8002a52:	2b1d      	cmp	r3, #29
 8002a54:	d001      	beq.n	8002a5a <__sflush_r+0xae>
 8002a56:	2b16      	cmp	r3, #22
 8002a58:	d101      	bne.n	8002a5e <__sflush_r+0xb2>
 8002a5a:	602f      	str	r7, [r5, #0]
 8002a5c:	e7b2      	b.n	80029c4 <__sflush_r+0x18>
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	e7ae      	b.n	80029c6 <__sflush_r+0x1a>
 8002a68:	690f      	ldr	r7, [r1, #16]
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d0aa      	beq.n	80029c4 <__sflush_r+0x18>
 8002a6e:	0793      	lsls	r3, r2, #30
 8002a70:	bf18      	it	ne
 8002a72:	2300      	movne	r3, #0
 8002a74:	680e      	ldr	r6, [r1, #0]
 8002a76:	bf08      	it	eq
 8002a78:	694b      	ldreq	r3, [r1, #20]
 8002a7a:	1bf6      	subs	r6, r6, r7
 8002a7c:	600f      	str	r7, [r1, #0]
 8002a7e:	608b      	str	r3, [r1, #8]
 8002a80:	2e00      	cmp	r6, #0
 8002a82:	dd9f      	ble.n	80029c4 <__sflush_r+0x18>
 8002a84:	4633      	mov	r3, r6
 8002a86:	463a      	mov	r2, r7
 8002a88:	4628      	mov	r0, r5
 8002a8a:	6a21      	ldr	r1, [r4, #32]
 8002a8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a90:	47e0      	blx	ip
 8002a92:	2800      	cmp	r0, #0
 8002a94:	dc06      	bgt.n	8002aa4 <__sflush_r+0xf8>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	e790      	b.n	80029c6 <__sflush_r+0x1a>
 8002aa4:	4407      	add	r7, r0
 8002aa6:	1a36      	subs	r6, r6, r0
 8002aa8:	e7ea      	b.n	8002a80 <__sflush_r+0xd4>
 8002aaa:	bf00      	nop
 8002aac:	dfbffffe 	.word	0xdfbffffe

08002ab0 <_fflush_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	690b      	ldr	r3, [r1, #16]
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	b913      	cbnz	r3, 8002ac0 <_fflush_r+0x10>
 8002aba:	2500      	movs	r5, #0
 8002abc:	4628      	mov	r0, r5
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	b118      	cbz	r0, 8002aca <_fflush_r+0x1a>
 8002ac2:	6a03      	ldr	r3, [r0, #32]
 8002ac4:	b90b      	cbnz	r3, 8002aca <_fflush_r+0x1a>
 8002ac6:	f7ff fa9f 	bl	8002008 <__sinit>
 8002aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f3      	beq.n	8002aba <_fflush_r+0xa>
 8002ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ad4:	07d0      	lsls	r0, r2, #31
 8002ad6:	d404      	bmi.n	8002ae2 <_fflush_r+0x32>
 8002ad8:	0599      	lsls	r1, r3, #22
 8002ada:	d402      	bmi.n	8002ae2 <_fflush_r+0x32>
 8002adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ade:	f7ff fb98 	bl	8002212 <__retarget_lock_acquire_recursive>
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	f7ff ff61 	bl	80029ac <__sflush_r>
 8002aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aec:	4605      	mov	r5, r0
 8002aee:	07da      	lsls	r2, r3, #31
 8002af0:	d4e4      	bmi.n	8002abc <_fflush_r+0xc>
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	059b      	lsls	r3, r3, #22
 8002af6:	d4e1      	bmi.n	8002abc <_fflush_r+0xc>
 8002af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002afa:	f7ff fb8b 	bl	8002214 <__retarget_lock_release_recursive>
 8002afe:	e7dd      	b.n	8002abc <_fflush_r+0xc>

08002b00 <__swbuf_r>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	460e      	mov	r6, r1
 8002b04:	4614      	mov	r4, r2
 8002b06:	4605      	mov	r5, r0
 8002b08:	b118      	cbz	r0, 8002b12 <__swbuf_r+0x12>
 8002b0a:	6a03      	ldr	r3, [r0, #32]
 8002b0c:	b90b      	cbnz	r3, 8002b12 <__swbuf_r+0x12>
 8002b0e:	f7ff fa7b 	bl	8002008 <__sinit>
 8002b12:	69a3      	ldr	r3, [r4, #24]
 8002b14:	60a3      	str	r3, [r4, #8]
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	071a      	lsls	r2, r3, #28
 8002b1a:	d525      	bpl.n	8002b68 <__swbuf_r+0x68>
 8002b1c:	6923      	ldr	r3, [r4, #16]
 8002b1e:	b31b      	cbz	r3, 8002b68 <__swbuf_r+0x68>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	6922      	ldr	r2, [r4, #16]
 8002b24:	b2f6      	uxtb	r6, r6
 8002b26:	1a98      	subs	r0, r3, r2
 8002b28:	6963      	ldr	r3, [r4, #20]
 8002b2a:	4637      	mov	r7, r6
 8002b2c:	4283      	cmp	r3, r0
 8002b2e:	dc04      	bgt.n	8002b3a <__swbuf_r+0x3a>
 8002b30:	4621      	mov	r1, r4
 8002b32:	4628      	mov	r0, r5
 8002b34:	f7ff ffbc 	bl	8002ab0 <_fflush_r>
 8002b38:	b9e0      	cbnz	r0, 8002b74 <__swbuf_r+0x74>
 8002b3a:	68a3      	ldr	r3, [r4, #8]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60a3      	str	r3, [r4, #8]
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	6022      	str	r2, [r4, #0]
 8002b46:	701e      	strb	r6, [r3, #0]
 8002b48:	6962      	ldr	r2, [r4, #20]
 8002b4a:	1c43      	adds	r3, r0, #1
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d004      	beq.n	8002b5a <__swbuf_r+0x5a>
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	07db      	lsls	r3, r3, #31
 8002b54:	d506      	bpl.n	8002b64 <__swbuf_r+0x64>
 8002b56:	2e0a      	cmp	r6, #10
 8002b58:	d104      	bne.n	8002b64 <__swbuf_r+0x64>
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f7ff ffa7 	bl	8002ab0 <_fflush_r>
 8002b62:	b938      	cbnz	r0, 8002b74 <__swbuf_r+0x74>
 8002b64:	4638      	mov	r0, r7
 8002b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f000 f806 	bl	8002b7c <__swsetup_r>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d0d5      	beq.n	8002b20 <__swbuf_r+0x20>
 8002b74:	f04f 37ff 	mov.w	r7, #4294967295
 8002b78:	e7f4      	b.n	8002b64 <__swbuf_r+0x64>
	...

08002b7c <__swsetup_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <__swsetup_r+0xac>)
 8002b80:	4605      	mov	r5, r0
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	460c      	mov	r4, r1
 8002b86:	b118      	cbz	r0, 8002b90 <__swsetup_r+0x14>
 8002b88:	6a03      	ldr	r3, [r0, #32]
 8002b8a:	b90b      	cbnz	r3, 8002b90 <__swsetup_r+0x14>
 8002b8c:	f7ff fa3c 	bl	8002008 <__sinit>
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b96:	0718      	lsls	r0, r3, #28
 8002b98:	d422      	bmi.n	8002be0 <__swsetup_r+0x64>
 8002b9a:	06d9      	lsls	r1, r3, #27
 8002b9c:	d407      	bmi.n	8002bae <__swsetup_r+0x32>
 8002b9e:	2309      	movs	r3, #9
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8002baa:	81a3      	strh	r3, [r4, #12]
 8002bac:	e034      	b.n	8002c18 <__swsetup_r+0x9c>
 8002bae:	0758      	lsls	r0, r3, #29
 8002bb0:	d512      	bpl.n	8002bd8 <__swsetup_r+0x5c>
 8002bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bb4:	b141      	cbz	r1, 8002bc8 <__swsetup_r+0x4c>
 8002bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bba:	4299      	cmp	r1, r3
 8002bbc:	d002      	beq.n	8002bc4 <__swsetup_r+0x48>
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f7ff fb2a 	bl	8002218 <_free_r>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6363      	str	r3, [r4, #52]	; 0x34
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002bce:	81a3      	strh	r3, [r4, #12]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6063      	str	r3, [r4, #4]
 8002bd4:	6923      	ldr	r3, [r4, #16]
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	f043 0308 	orr.w	r3, r3, #8
 8002bde:	81a3      	strh	r3, [r4, #12]
 8002be0:	6923      	ldr	r3, [r4, #16]
 8002be2:	b94b      	cbnz	r3, 8002bf8 <__swsetup_r+0x7c>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bee:	d003      	beq.n	8002bf8 <__swsetup_r+0x7c>
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f000 f85d 	bl	8002cb2 <__smakebuf_r>
 8002bf8:	89a0      	ldrh	r0, [r4, #12]
 8002bfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bfe:	f010 0301 	ands.w	r3, r0, #1
 8002c02:	d00a      	beq.n	8002c1a <__swsetup_r+0x9e>
 8002c04:	2300      	movs	r3, #0
 8002c06:	60a3      	str	r3, [r4, #8]
 8002c08:	6963      	ldr	r3, [r4, #20]
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	61a3      	str	r3, [r4, #24]
 8002c0e:	6923      	ldr	r3, [r4, #16]
 8002c10:	b943      	cbnz	r3, 8002c24 <__swsetup_r+0xa8>
 8002c12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c16:	d1c4      	bne.n	8002ba2 <__swsetup_r+0x26>
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
 8002c1a:	0781      	lsls	r1, r0, #30
 8002c1c:	bf58      	it	pl
 8002c1e:	6963      	ldrpl	r3, [r4, #20]
 8002c20:	60a3      	str	r3, [r4, #8]
 8002c22:	e7f4      	b.n	8002c0e <__swsetup_r+0x92>
 8002c24:	2000      	movs	r0, #0
 8002c26:	e7f7      	b.n	8002c18 <__swsetup_r+0x9c>
 8002c28:	20000064 	.word	0x20000064

08002c2c <_sbrk_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	2300      	movs	r3, #0
 8002c30:	4d05      	ldr	r5, [pc, #20]	; (8002c48 <_sbrk_r+0x1c>)
 8002c32:	4604      	mov	r4, r0
 8002c34:	4608      	mov	r0, r1
 8002c36:	602b      	str	r3, [r5, #0]
 8002c38:	f7fd fe14 	bl	8000864 <_sbrk>
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d102      	bne.n	8002c46 <_sbrk_r+0x1a>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	b103      	cbz	r3, 8002c46 <_sbrk_r+0x1a>
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	20000534 	.word	0x20000534

08002c4c <memchr>:
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	b510      	push	{r4, lr}
 8002c50:	b2c9      	uxtb	r1, r1
 8002c52:	4402      	add	r2, r0
 8002c54:	4293      	cmp	r3, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	d101      	bne.n	8002c5e <memchr+0x12>
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	e003      	b.n	8002c66 <memchr+0x1a>
 8002c5e:	7804      	ldrb	r4, [r0, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	428c      	cmp	r4, r1
 8002c64:	d1f6      	bne.n	8002c54 <memchr+0x8>
 8002c66:	bd10      	pop	{r4, pc}

08002c68 <__swhatbuf_r>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c70:	4615      	mov	r5, r2
 8002c72:	2900      	cmp	r1, #0
 8002c74:	461e      	mov	r6, r3
 8002c76:	b096      	sub	sp, #88	; 0x58
 8002c78:	da0c      	bge.n	8002c94 <__swhatbuf_r+0x2c>
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c82:	bf0c      	ite	eq
 8002c84:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002c88:	2340      	movne	r3, #64	; 0x40
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	6031      	str	r1, [r6, #0]
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	b016      	add	sp, #88	; 0x58
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	466a      	mov	r2, sp
 8002c96:	f000 f849 	bl	8002d2c <_fstat_r>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	dbed      	blt.n	8002c7a <__swhatbuf_r+0x12>
 8002c9e:	9901      	ldr	r1, [sp, #4]
 8002ca0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002ca4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ca8:	4259      	negs	r1, r3
 8002caa:	4159      	adcs	r1, r3
 8002cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb0:	e7eb      	b.n	8002c8a <__swhatbuf_r+0x22>

08002cb2 <__smakebuf_r>:
 8002cb2:	898b      	ldrh	r3, [r1, #12]
 8002cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cb6:	079d      	lsls	r5, r3, #30
 8002cb8:	4606      	mov	r6, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	d507      	bpl.n	8002cce <__smakebuf_r+0x1c>
 8002cbe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	6123      	str	r3, [r4, #16]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	6163      	str	r3, [r4, #20]
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	466a      	mov	r2, sp
 8002cd0:	ab01      	add	r3, sp, #4
 8002cd2:	f7ff ffc9 	bl	8002c68 <__swhatbuf_r>
 8002cd6:	9900      	ldr	r1, [sp, #0]
 8002cd8:	4605      	mov	r5, r0
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f7ff fb04 	bl	80022e8 <_malloc_r>
 8002ce0:	b948      	cbnz	r0, 8002cf6 <__smakebuf_r+0x44>
 8002ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce6:	059a      	lsls	r2, r3, #22
 8002ce8:	d4ef      	bmi.n	8002cca <__smakebuf_r+0x18>
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	e7e3      	b.n	8002cbe <__smakebuf_r+0xc>
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	6020      	str	r0, [r4, #0]
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	9b00      	ldr	r3, [sp, #0]
 8002d02:	6120      	str	r0, [r4, #16]
 8002d04:	6163      	str	r3, [r4, #20]
 8002d06:	9b01      	ldr	r3, [sp, #4]
 8002d08:	b15b      	cbz	r3, 8002d22 <__smakebuf_r+0x70>
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d10:	f000 f81e 	bl	8002d50 <_isatty_r>
 8002d14:	b128      	cbz	r0, 8002d22 <__smakebuf_r+0x70>
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	f023 0303 	bic.w	r3, r3, #3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	81a3      	strh	r3, [r4, #12]
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	431d      	orrs	r5, r3
 8002d26:	81a5      	strh	r5, [r4, #12]
 8002d28:	e7cf      	b.n	8002cca <__smakebuf_r+0x18>
	...

08002d2c <_fstat_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	2300      	movs	r3, #0
 8002d30:	4d06      	ldr	r5, [pc, #24]	; (8002d4c <_fstat_r+0x20>)
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	602b      	str	r3, [r5, #0]
 8002d3a:	f7fd fd6d 	bl	8000818 <_fstat>
 8002d3e:	1c43      	adds	r3, r0, #1
 8002d40:	d102      	bne.n	8002d48 <_fstat_r+0x1c>
 8002d42:	682b      	ldr	r3, [r5, #0]
 8002d44:	b103      	cbz	r3, 8002d48 <_fstat_r+0x1c>
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000534 	.word	0x20000534

08002d50 <_isatty_r>:
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	2300      	movs	r3, #0
 8002d54:	4d05      	ldr	r5, [pc, #20]	; (8002d6c <_isatty_r+0x1c>)
 8002d56:	4604      	mov	r4, r0
 8002d58:	4608      	mov	r0, r1
 8002d5a:	602b      	str	r3, [r5, #0]
 8002d5c:	f7fd fd6b 	bl	8000836 <_isatty>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_isatty_r+0x1a>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_isatty_r+0x1a>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20000534 	.word	0x20000534

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
